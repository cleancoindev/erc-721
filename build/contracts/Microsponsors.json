{
  "contractName": "Microsponsors",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mintWithTokenURI",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract DeployedRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateRegistryAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "safeMintWithTokenURI",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.c082d0b4\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DeployedRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRegistryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"safeMintWithTokenURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"tokenOwner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"burn(uint256)\":{\"details\":\"Burns a specific ERC721 token.\",\"params\":{\"tokenId\":\"uint256 id of the ERC721 token to be burned.\"}},\"constructor\":{\"details\":\"Constructor function\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given token owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"tokenOwner\":\"token owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the token owner\"},\"isMinter(address)\":{\"details\":\"Checks if minter isWhitelisted()\"},\"isWhitelisted(address)\":{\"details\":\"Checks Registry contract for whitelisted status\",\"params\":{\"target\":\"The address to check\"}},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens.\",\"params\":{\"to\":\"The address that will receive the minted token.\",\"tokenId\":\"The token id to mint.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"mintWithTokenURI(address,uint256,string)\":{\"details\":\"Function to mint tokens.\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"tokenId\":\"The token id to mint.\",\"tokenURI\":\"The token URI of the minted token.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"name()\":{\"details\":\"Gets the token name.\",\"return\":\"string representing the token name\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"pause()\":{\"details\":\"Called by contract owner to pause actions on this contract\"},\"safeMint(address,uint256)\":{\"details\":\"Function to safely mint tokens.\",\"params\":{\"to\":\"The address that will receive the minted token.\",\"tokenId\":\"The token id to mint.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"safeMint(address,uint256,bytes)\":{\"details\":\"Function to safely mint tokens.\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check.\",\"to\":\"The address that will receive the minted token.\",\"tokenId\":\"The token id to mint.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"safeMintWithTokenURI(address,uint256,string)\":{\"details\":\"Function to safely mint tokens.\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"tokenId\":\"The token id to mint.\",\"tokenURI\":\"The token URI of the minted token.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Gets the token symbol.\",\"return\":\"string representing the token symbol\"},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"unpause()\":{\"details\":\"Called by contract owner to unpause the smart contract.\"},\"updateRegistryAddress(address)\":{\"details\":\"Update address for Microsponsors Registry contract\",\"params\":{\"newAddress\":\"where the Registry contract lives\"}}}},\"userdoc\":{\"methods\":{\"burn(uint256)\":{\"notice\":\"Customized for Microsponsors\"},\"mintWithTokenURI(address,uint256,string)\":{\"notice\":\"Customized for Microsponsors from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721MetadataMintable.sol\"},\"safeMintWithTokenURI(address,uint256,string)\":{\"notice\":\"Customized for Microsponsors from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721MetadataMintable.sol\"},\"unpause()\":{\"notice\":\"This is public rather than external so it can be called by  derived contracts.\"}},\"notice\":\"Customized for Microsponsors from Open Zeppelin's ERC721Metadata contract: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol\"}},\"settings\":{\"compilationTarget\":{\"/Users/lauren/github/erc-721/contracts/Microsponsors.sol\":\"Microsponsors\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/lauren/github/erc-721/contracts/Address.sol\":{\"keccak256\":\"0xb9c8ec62a75480fb84d7b7ddb457fab3e198c8cd1e080097227c5a0c307bded0\",\"urls\":[\"bzz-raw://997a59cc670e9ec614c3b656fe7c9802ee08398c021882202b1ba66860b3b411\",\"dweb:/ipfs/QmS7eyFmB2uPsAGvGTp4wNkdesSDbsyYmwTtXZRMgjJQLY\"]},\"/Users/lauren/github/erc-721/contracts/Counters.sol\":{\"keccak256\":\"0xf46bdae61a952c7c88b0e14b2b8a36323124d3ae6c1809b1cb6c8e0ee1ef52bd\",\"urls\":[\"bzz-raw://9df021130f1d2a259d3ecdbb1c4119d9d8e343d099c71c7c419b80dc224dcf5c\",\"dweb:/ipfs/QmbvGt28QyqV5eyEx63JKqmnVX23pKUQtUky4Ddgofw5T8\"]},\"/Users/lauren/github/erc-721/contracts/ERC165.sol\":{\"keccak256\":\"0x3a7970619ff17158d3906f2d74b2fa9896e698368ffe4bbacf4c61a821de5a89\",\"urls\":[\"bzz-raw://9abeddaf2555a3d4cc13e7988bee67ea60ce72ac70e27ce3c4120f873b0528c8\",\"dweb:/ipfs/QmVxW1BRWhpVLtecgN41Cx2XTNdiVAVbDUKQd6V1YTv6Qc\"]},\"/Users/lauren/github/erc-721/contracts/ERC721.sol\":{\"keccak256\":\"0xbcb632d7a6453ff0b8d6cfbdb1daa2e42fbcfe2cab73eb5d2f2c31a20b1f30b6\",\"urls\":[\"bzz-raw://404b6a5a044a89c4dd05876cf09d85e49293fd86cc11bb97b92d7dd02c19aa9d\",\"dweb:/ipfs/QmU1LP7bXZyoqEi67PjNReo7ehT7LzDrTdrpvuwxXU2ZMD\"]},\"/Users/lauren/github/erc-721/contracts/IERC165.sol\":{\"keccak256\":\"0xdf77f8206b88bee3fab2197feea6db1d30d88799485b2c8f94de4ccfc5130f51\",\"urls\":[\"bzz-raw://652a4382cf6ce8b5b950a7e10ad3acf2756c9b57b6dc97a453cb8de365e2dd74\",\"dweb:/ipfs/QmdQjC5k9RSMYxC1bnHwRvUCemsrx59wWVT8gBG85xmA1y\"]},\"/Users/lauren/github/erc-721/contracts/IERC721.sol\":{\"keccak256\":\"0xdcea19a3fba19d9c18bea199c2c4882f533680a7c8ff481978aef4a959c1a0d4\",\"urls\":[\"bzz-raw://80da325ae2d4945672f28bae883a91f58f4c93caacbc448573eb5e6d5fb4227b\",\"dweb:/ipfs/QmdwreDnciyDjRTMXcBnr7HX7AGPtjiejUmdVtEQCEXYhC\"]},\"/Users/lauren/github/erc-721/contracts/IERC721Receiver.sol\":{\"keccak256\":\"0x2aa068c070f5be5b5a307dc7ef86b021afc38a32cee1412ee4a790e5d01f61f5\",\"urls\":[\"bzz-raw://44130d2414de808036767524a3184b3820e2c928452e1ec41f70471490e73326\",\"dweb:/ipfs/QmXA7bbDDLmNPQH3r7ERYGXWUNdDNnUYWDPnDwbD98kUy2\"]},\"/Users/lauren/github/erc-721/contracts/Microsponsors.sol\":{\"keccak256\":\"0xc4090c7464a1aaa8d8930043bf5c97da63b7e2952bada1029c208902b2a0beb9\",\"urls\":[\"bzz-raw://0e69cdead09c30c19a1850ac7c46b256de08a6f12507bc849bccd9bc89940d68\",\"dweb:/ipfs/QmcSQeGBcGkapKJwK8WhvTyMHr52mfyHLWsCZmwsBzq3Kk\"]},\"/Users/lauren/github/erc-721/contracts/SafeMath.sol\":{\"keccak256\":\"0xb2add257d778d75e1cd810e86641a556fbffd33abde4d87f8598fec4d42a724d\",\"urls\":[\"bzz-raw://edbcc35e8e58498cc504217afa8a738e9882da3de3709d0889473668b189aaf2\",\"dweb:/ipfs/QmYTTRVrJoYmjLJus9JRzFcCWEJVwdV6cSqYK8fS7K2NHj\"]}},\"version\":1}",
  "bytecode": "0x60806040526000600860006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162003e5038038062003e50833981810160405260608110156200005257600080fd5b81019080805160405193929190846401000000008211156200007357600080fd5b838201915060208201858111156200008a57600080fd5b8251866001820283011164010000000082111715620000a857600080fd5b8083526020830192505050908051906020019080838360005b83811015620000de578082015181840152602081019050620000c1565b50505050905090810190601f1680156200010c5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200013057600080fd5b838201915060208201858111156200014757600080fd5b82518660018202830111640100000000821117156200016557600080fd5b8083526020830192505050908051906020019080838360005b838110156200019b5780820151818401526020810190506200017e565b50505050905090810190601f168015620001c95780820380516001836020036101000a031916815260200191505b5060405260200180519060200190929190505050620001f56301ffc9a760e01b620002c660201b60201c565b6200020d6380ac58cd60e01b620002c660201b60201c565b6200021d620003cf60201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826009908051906020019062000275929190620004ee565b5081600a90805190602001906200028e929190620004ee565b50620002a7635b5e139f60e01b620002c660201b60201c565b620002bd81620003d760201b620021241760201c565b5050506200059d565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600033905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662000420620003cf60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620004aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200053157805160ff191683800117855562000562565b8280016001018555821562000562579182015b828111156200056157825182559160200191906001019062000544565b5b50905062000571919062000575565b5090565b6200059a91905b80821115620005965760008160009055506001016200057c565b5090565b90565b6138a380620005ad6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637b103999116100f9578063aa271e1a11610097578063c87b56dd11610071578063c87b56dd14610ba1578063ca63c0ef14610c48578063e985e9c514610d45578063f2fde38b14610dc1576101c4565b8063aa271e1a146109fc578063b88d4fde14610a58578063c57a882514610b5d576101c4565b80638da5cb5b116100d35780638da5cb5b1461087957806395d89b41146108c3578063a144819414610946578063a22cb465146109ac576101c4565b80637b103999146107285780638456cb59146107725780638832e6e31461077c576101c4565b806340c10f191161016657806350bb4e7f1161014057806350bb4e7f146105435780635c975abb146106405780636352211e1461066257806370a08231146106d0576101c4565b806340c10f191461044157806342842e0e146104a757806342966c6814610515576101c4565b8063095ea7b3116101a2578063095ea7b31461031f57806323b872dd1461036d5780633af32abf146103db5780633f4ba83a14610437576101c4565b806301ffc9a7146101c957806306fdde031461022e578063081812fc146102b1575b600080fd5b610214600480360360208110156101df57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610e05565b604051808215151515815260200191505060405180910390f35b610236610e6c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027657808201518184015260208101905061025b565b50505050905090810190601f1680156102a35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102dd600480360360208110156102c757600080fd5b8101908080359060200190929190505050610f0e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61036b6004803603604081101561033557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fa9565b005b6103d96004803603606081101561038357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061128a565b005b61041d600480360360208110156103f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061143b565b604051808215151515815260200191505060405180910390f35b61043f61151e565b005b61048d6004803603604081101561045757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061161e565b604051808215151515815260200191505060405180910390f35b610513600480360360608110156104bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116b3565b005b6105416004803603602081101561052b57600080fd5b81019080803590602001909291905050506116d3565b005b6106266004803603606081101561055957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156105a057600080fd5b8201836020820111156105b257600080fd5b803590602001918460018302840111640100000000831117156105d457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061175f565b604051808215151515815260200191505060405180910390f35b6106486117ff565b604051808215151515815260200191505060405180910390f35b61068e6004803603602081101561067857600080fd5b8101908080359060200190929190505050611812565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610712600480360360208110156106e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118da565b6040518082815260200191505060405180910390f35b6107306119af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61077a6119d5565b005b61085f6004803603606081101561079257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156107d957600080fd5b8201836020820111156107eb57600080fd5b8035906020019184600183028401116401000000008311171561080d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611ad6565b604051808215151515815260200191505060405180910390f35b610881611b6d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108cb611b93565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5780820151818401526020810190506108f0565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6109926004803603604081101561095c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c35565b604051808215151515815260200191505060405180910390f35b6109fa600480360360408110156109c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611cca565b005b610a3e60048036036020811015610a1257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f5f565b604051808215151515815260200191505060405180910390f35b610b5b60048036036080811015610a6e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610ad557600080fd5b820183602082011115610ae757600080fd5b80359060200191846001830284011164010000000083111715610b0957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f71565b005b610b9f60048036036020811015610b7357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612124565b005b610bcd60048036036020811015610bb757600080fd5b8101908080359060200190929190505050612232565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c0d578082015181840152602081019050610bf2565b50505050905090810190601f168015610c3a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610d2b60048036036060811015610c5e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610ca557600080fd5b820183602082011115610cb757600080fd5b80359060200191846001830284011164010000000083111715610cd957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612345565b604051808215151515815260200191505060405180910390f35b610da760048036036040811015610d5b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123e5565b604051808215151515815260200191505060405180910390f35b610e0360048036036020811015610dd757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612479565b005b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f045780601f10610ed957610100808354040283529160200191610f04565b820191906000526020600020905b815481529060010190602001808311610ee757829003601f168201915b5050505050905090565b6000610f19826125bc565b610f6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061372a602c913960400191505060405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610fb9610fb461262e565b61143b565b61100e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061384e6021913960400191505060405180910390fd5b600860009054906101000a900460ff161561102857600080fd5b600061103382611812565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4552433732313a20617070726f76616c20697320726564756e64616e7400000081525060200191505060405180910390fd5b6110e08361143b565b611135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806136f66034913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661115461262e565b73ffffffffffffffffffffffffffffffffffffffff16148061118357506111828161117d61262e565b6123e5565b5b6111d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180613689603e913960400191505060405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61129a61129561262e565b61143b565b6112ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061384e6021913960400191505060405180910390fd5b600860009054906101000a900460ff161561130957600080fd5b61131a61131461262e565b82612636565b61136f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061377f6031913960400191505060405180910390fd5b6113788361143b565b6113cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b6113d68261143b565b61142b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b61143683838361284b565b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156114dc57600080fd5b505afa1580156114f0573d6000803e3d6000fd5b505050506040513d602081101561150657600080fd5b81019080805190602001909291905050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661155f61262e565b73ffffffffffffffffffffffffffffffffffffffff16146115e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600860009054906101000a900460ff1661160157600080fd5b6000600860006101000a81548160ff021916908315150217905550565b600061163061162b61262e565b611f5f565b611685576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806135a66035913960400191505060405180910390fd5b600860009054906101000a900460ff161561169f57600080fd5b6116a98383612aa6565b6001905092915050565b6116ce83838360405180602001604052806000815250611f71565b505050565b600860009054906101000a900460ff16156116ed57600080fd5b6116fe6116f861262e565b82612636565b611753576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806137f9602e913960400191505060405180910390fd5b61175c81612cbe565b50565b600061177161176c61262e565b611f5f565b6117c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806135a66035913960400191505060405180910390fd5b600860009054906101000a900460ff16156117e057600080fd5b6117ea8484612aa6565b6117f48383612cd3565b600190509392505050565b600860009054906101000a900460ff1681565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806136c7602f913960400191505060405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061365f602a913960400191505060405180910390fd5b6119a8600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612d5d565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611a1661262e565b73ffffffffffffffffffffffffffffffffffffffff1614611a9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600860009054906101000a900460ff1615611ab957600080fd5b6001600860006101000a81548160ff021916908315150217905550565b6000611ae8611ae361262e565b611f5f565b611b3d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806135a66035913960400191505060405180910390fd5b600860009054906101000a900460ff1615611b5757600080fd5b611b62848484612d6b565b600190509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c2b5780601f10611c0057610100808354040283529160200191611c2b565b820191906000526020600020905b815481529060010190602001808311611c0e57829003601f168201915b5050505050905090565b6000611c47611c4261262e565b611f5f565b611c9c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806135a66035913960400191505060405180910390fd5b600860009054906101000a900460ff1615611cb657600080fd5b611cc08383612ddc565b6001905092915050565b611cda611cd561262e565b61143b565b611d2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061384e6021913960400191505060405180910390fd5b600860009054906101000a900460ff1615611d4957600080fd5b611d5161262e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611df2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b611dfb8261143b565b611e50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806136f66034913960400191505060405180910390fd5b8060066000611e5d61262e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611f0a61262e565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000611f6a8261143b565b9050919050565b611f81611f7c61262e565b61143b565b611fd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061384e6021913960400191505060405180910390fd5b600860009054906101000a900460ff1615611ff057600080fd5b611ff98461143b565b61204e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b6120578361143b565b6120ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b6120bd6120b761262e565b83612636565b612112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061377f6031913960400191505060405180910390fd5b61211e84848484612dfa565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661216561262e565b73ffffffffffffffffffffffffffffffffffffffff16146121ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061223d826125bc565b612292576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806138276027913960400191505060405180910390fd5b600760008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123395780601f1061230e57610100808354040283529160200191612339565b820191906000526020600020905b81548152906001019060200180831161231c57829003601f168201915b50505050509050919050565b600061235761235261262e565b611f5f565b6123ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806135a66035913960400191505060405180910390fd5b600860009054906101000a900460ff16156123c657600080fd5b6123d08484612ddc565b6123da8383612cd3565b600190509392505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166124ba61262e565b73ffffffffffffffffffffffffffffffffffffffff1614612543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146125b95780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600033905090565b600061264861264361262e565b61143b565b61269d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061384e6021913960400191505060405180910390fd5b6126a6826125bc565b6126fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806135ff602c913960400191505060405180910390fd5b6127048361143b565b612759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b600061276483611812565b905061276f8161143b565b6127c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061283157508373ffffffffffffffffffffffffffffffffffffffff1661281984610f0e565b73ffffffffffffffffffffffffffffffffffffffff16145b80612842575061284181856123e5565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661286b82611812565b73ffffffffffffffffffffffffffffffffffffffff16146128d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806137566029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561295d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806135db6024913960400191505060405180910390fd5b61296681612e6c565b6129ad600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f2a565b6129f4600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f4d565b816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b612b52816125bc565b15612bc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612c5e600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f4d565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b612cd0612cca82611812565b82612f63565b50565b612cdc826125bc565b612d31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806137d56024913960400191505060405180910390fd5b80600760008481526020019081526020016000209080519060200190612d58929190613486565b505050565b600081600001549050919050565b612d758383612aa6565b612d826000848484613141565b612dd7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806135746032913960400191505060405180910390fd5b505050565b612df6828260405180602001604052806000815250612d6b565b5050565b612e0584848461284b565b612e1184848484613141565b612e66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806135746032913960400191505060405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612f275760006004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b612f426001826000015461333190919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b8173ffffffffffffffffffffffffffffffffffffffff16612f8382611812565b73ffffffffffffffffffffffffffffffffffffffff1614612fef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806137b06025913960400191505060405180910390fd5b612ff881612e6c565b61303f600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f2a565b60006003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060076000838152602001908152602001600020805460018160011615610100020316600290049050146130e1576007600082815260200190815260200160002060006130e09190613506565b5b80600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006131628473ffffffffffffffffffffffffffffffffffffffff1661337b565b61316f5760019050613329565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a0261319561262e565b8887876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613251578082015181840152602081019050613236565b50505050905090810190601f16801561327e5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156132a057600080fd5b505af11580156132b4573d6000803e3d6000fd5b505050506040513d60208110156132ca57600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600061337383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506133c6565b905092915050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b82141580156133bd5750808214155b92505050919050565b6000838311158290613473576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561343857808201518184015260208101905061341d565b50505050905090810190601f1680156134655780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106134c757805160ff19168380011785556134f5565b828001600101855582156134f5579182015b828111156134f45782518255916020019190600101906134d9565b5b509050613502919061354e565b5090565b50805460018160011615610100020316600290046000825580601f1061352c575061354b565b601f01602090049060005260206000209081019061354a919061354e565b5b50565b61357091905b8082111561356c576000816000905550600101613554565b5090565b9056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a2063616c6c6572206973206e6f742077686974656c697374656420666f7220746865204d696e74657220726f6c654552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572207265737472696374656420746f2077686974656c6973746564206164647265737365734552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a20746f6b656e206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c207265737472696374656420746f2077686974656c6973746564206164647265737365734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f7665644552433732313a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a2063616c6c6572206973206e6f742077686974656c6973746564a265627a7a7231582027b429820752a709f5c2934c4e5ff36d04e34370509df3341ba04010b9263f2764736f6c634300050b0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80637b103999116100f9578063aa271e1a11610097578063c87b56dd11610071578063c87b56dd14610ba1578063ca63c0ef14610c48578063e985e9c514610d45578063f2fde38b14610dc1576101c4565b8063aa271e1a146109fc578063b88d4fde14610a58578063c57a882514610b5d576101c4565b80638da5cb5b116100d35780638da5cb5b1461087957806395d89b41146108c3578063a144819414610946578063a22cb465146109ac576101c4565b80637b103999146107285780638456cb59146107725780638832e6e31461077c576101c4565b806340c10f191161016657806350bb4e7f1161014057806350bb4e7f146105435780635c975abb146106405780636352211e1461066257806370a08231146106d0576101c4565b806340c10f191461044157806342842e0e146104a757806342966c6814610515576101c4565b8063095ea7b3116101a2578063095ea7b31461031f57806323b872dd1461036d5780633af32abf146103db5780633f4ba83a14610437576101c4565b806301ffc9a7146101c957806306fdde031461022e578063081812fc146102b1575b600080fd5b610214600480360360208110156101df57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610e05565b604051808215151515815260200191505060405180910390f35b610236610e6c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027657808201518184015260208101905061025b565b50505050905090810190601f1680156102a35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102dd600480360360208110156102c757600080fd5b8101908080359060200190929190505050610f0e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61036b6004803603604081101561033557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fa9565b005b6103d96004803603606081101561038357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061128a565b005b61041d600480360360208110156103f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061143b565b604051808215151515815260200191505060405180910390f35b61043f61151e565b005b61048d6004803603604081101561045757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061161e565b604051808215151515815260200191505060405180910390f35b610513600480360360608110156104bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116b3565b005b6105416004803603602081101561052b57600080fd5b81019080803590602001909291905050506116d3565b005b6106266004803603606081101561055957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156105a057600080fd5b8201836020820111156105b257600080fd5b803590602001918460018302840111640100000000831117156105d457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061175f565b604051808215151515815260200191505060405180910390f35b6106486117ff565b604051808215151515815260200191505060405180910390f35b61068e6004803603602081101561067857600080fd5b8101908080359060200190929190505050611812565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610712600480360360208110156106e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118da565b6040518082815260200191505060405180910390f35b6107306119af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61077a6119d5565b005b61085f6004803603606081101561079257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156107d957600080fd5b8201836020820111156107eb57600080fd5b8035906020019184600183028401116401000000008311171561080d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611ad6565b604051808215151515815260200191505060405180910390f35b610881611b6d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108cb611b93565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5780820151818401526020810190506108f0565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6109926004803603604081101561095c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c35565b604051808215151515815260200191505060405180910390f35b6109fa600480360360408110156109c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611cca565b005b610a3e60048036036020811015610a1257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f5f565b604051808215151515815260200191505060405180910390f35b610b5b60048036036080811015610a6e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610ad557600080fd5b820183602082011115610ae757600080fd5b80359060200191846001830284011164010000000083111715610b0957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f71565b005b610b9f60048036036020811015610b7357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612124565b005b610bcd60048036036020811015610bb757600080fd5b8101908080359060200190929190505050612232565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c0d578082015181840152602081019050610bf2565b50505050905090810190601f168015610c3a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610d2b60048036036060811015610c5e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610ca557600080fd5b820183602082011115610cb757600080fd5b80359060200191846001830284011164010000000083111715610cd957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612345565b604051808215151515815260200191505060405180910390f35b610da760048036036040811015610d5b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123e5565b604051808215151515815260200191505060405180910390f35b610e0360048036036020811015610dd757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612479565b005b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f045780601f10610ed957610100808354040283529160200191610f04565b820191906000526020600020905b815481529060010190602001808311610ee757829003601f168201915b5050505050905090565b6000610f19826125bc565b610f6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061372a602c913960400191505060405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610fb9610fb461262e565b61143b565b61100e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061384e6021913960400191505060405180910390fd5b600860009054906101000a900460ff161561102857600080fd5b600061103382611812565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4552433732313a20617070726f76616c20697320726564756e64616e7400000081525060200191505060405180910390fd5b6110e08361143b565b611135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806136f66034913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661115461262e565b73ffffffffffffffffffffffffffffffffffffffff16148061118357506111828161117d61262e565b6123e5565b5b6111d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180613689603e913960400191505060405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61129a61129561262e565b61143b565b6112ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061384e6021913960400191505060405180910390fd5b600860009054906101000a900460ff161561130957600080fd5b61131a61131461262e565b82612636565b61136f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061377f6031913960400191505060405180910390fd5b6113788361143b565b6113cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b6113d68261143b565b61142b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b61143683838361284b565b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156114dc57600080fd5b505afa1580156114f0573d6000803e3d6000fd5b505050506040513d602081101561150657600080fd5b81019080805190602001909291905050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661155f61262e565b73ffffffffffffffffffffffffffffffffffffffff16146115e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600860009054906101000a900460ff1661160157600080fd5b6000600860006101000a81548160ff021916908315150217905550565b600061163061162b61262e565b611f5f565b611685576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806135a66035913960400191505060405180910390fd5b600860009054906101000a900460ff161561169f57600080fd5b6116a98383612aa6565b6001905092915050565b6116ce83838360405180602001604052806000815250611f71565b505050565b600860009054906101000a900460ff16156116ed57600080fd5b6116fe6116f861262e565b82612636565b611753576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806137f9602e913960400191505060405180910390fd5b61175c81612cbe565b50565b600061177161176c61262e565b611f5f565b6117c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806135a66035913960400191505060405180910390fd5b600860009054906101000a900460ff16156117e057600080fd5b6117ea8484612aa6565b6117f48383612cd3565b600190509392505050565b600860009054906101000a900460ff1681565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806136c7602f913960400191505060405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061365f602a913960400191505060405180910390fd5b6119a8600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612d5d565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611a1661262e565b73ffffffffffffffffffffffffffffffffffffffff1614611a9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600860009054906101000a900460ff1615611ab957600080fd5b6001600860006101000a81548160ff021916908315150217905550565b6000611ae8611ae361262e565b611f5f565b611b3d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806135a66035913960400191505060405180910390fd5b600860009054906101000a900460ff1615611b5757600080fd5b611b62848484612d6b565b600190509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c2b5780601f10611c0057610100808354040283529160200191611c2b565b820191906000526020600020905b815481529060010190602001808311611c0e57829003601f168201915b5050505050905090565b6000611c47611c4261262e565b611f5f565b611c9c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806135a66035913960400191505060405180910390fd5b600860009054906101000a900460ff1615611cb657600080fd5b611cc08383612ddc565b6001905092915050565b611cda611cd561262e565b61143b565b611d2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061384e6021913960400191505060405180910390fd5b600860009054906101000a900460ff1615611d4957600080fd5b611d5161262e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611df2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b611dfb8261143b565b611e50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806136f66034913960400191505060405180910390fd5b8060066000611e5d61262e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611f0a61262e565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000611f6a8261143b565b9050919050565b611f81611f7c61262e565b61143b565b611fd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061384e6021913960400191505060405180910390fd5b600860009054906101000a900460ff1615611ff057600080fd5b611ff98461143b565b61204e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b6120578361143b565b6120ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b6120bd6120b761262e565b83612636565b612112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061377f6031913960400191505060405180910390fd5b61211e84848484612dfa565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661216561262e565b73ffffffffffffffffffffffffffffffffffffffff16146121ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061223d826125bc565b612292576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806138276027913960400191505060405180910390fd5b600760008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123395780601f1061230e57610100808354040283529160200191612339565b820191906000526020600020905b81548152906001019060200180831161231c57829003601f168201915b50505050509050919050565b600061235761235261262e565b611f5f565b6123ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806135a66035913960400191505060405180910390fd5b600860009054906101000a900460ff16156123c657600080fd5b6123d08484612ddc565b6123da8383612cd3565b600190509392505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166124ba61262e565b73ffffffffffffffffffffffffffffffffffffffff1614612543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146125b95780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600033905090565b600061264861264361262e565b61143b565b61269d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061384e6021913960400191505060405180910390fd5b6126a6826125bc565b6126fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806135ff602c913960400191505060405180910390fd5b6127048361143b565b612759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b600061276483611812565b905061276f8161143b565b6127c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603481526020018061362b6034913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061283157508373ffffffffffffffffffffffffffffffffffffffff1661281984610f0e565b73ffffffffffffffffffffffffffffffffffffffff16145b80612842575061284181856123e5565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661286b82611812565b73ffffffffffffffffffffffffffffffffffffffff16146128d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806137566029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561295d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806135db6024913960400191505060405180910390fd5b61296681612e6c565b6129ad600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f2a565b6129f4600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f4d565b816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b612b52816125bc565b15612bc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612c5e600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f4d565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b612cd0612cca82611812565b82612f63565b50565b612cdc826125bc565b612d31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806137d56024913960400191505060405180910390fd5b80600760008481526020019081526020016000209080519060200190612d58929190613486565b505050565b600081600001549050919050565b612d758383612aa6565b612d826000848484613141565b612dd7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806135746032913960400191505060405180910390fd5b505050565b612df6828260405180602001604052806000815250612d6b565b5050565b612e0584848461284b565b612e1184848484613141565b612e66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806135746032913960400191505060405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612f275760006004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b612f426001826000015461333190919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b8173ffffffffffffffffffffffffffffffffffffffff16612f8382611812565b73ffffffffffffffffffffffffffffffffffffffff1614612fef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806137b06025913960400191505060405180910390fd5b612ff881612e6c565b61303f600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f2a565b60006003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060076000838152602001908152602001600020805460018160011615610100020316600290049050146130e1576007600082815260200190815260200160002060006130e09190613506565b5b80600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006131628473ffffffffffffffffffffffffffffffffffffffff1661337b565b61316f5760019050613329565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a0261319561262e565b8887876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613251578082015181840152602081019050613236565b50505050905090810190601f16801561327e5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156132a057600080fd5b505af11580156132b4573d6000803e3d6000fd5b505050506040513d60208110156132ca57600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600061337383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506133c6565b905092915050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b82141580156133bd5750808214155b92505050919050565b6000838311158290613473576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561343857808201518184015260208101905061341d565b50505050905090810190601f1680156134655780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106134c757805160ff19168380011785556134f5565b828001600101855582156134f5579182015b828111156134f45782518255916020019190600101906134d9565b5b509050613502919061354e565b5090565b50805460018160011615610100020316600290046000825580601f1061352c575061354b565b601f01602090049060005260206000209081019061354a919061354e565b5b50565b61357091905b8082111561356c576000816000905550600101613554565b5090565b9056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a2063616c6c6572206973206e6f742077686974656c697374656420666f7220746865204d696e74657220726f6c654552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572207265737472696374656420746f2077686974656c6973746564206164647265737365734552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a20746f6b656e206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c207265737472696374656420746f2077686974656c6973746564206164647265737365734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f7665644552433732313a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a2063616c6c6572206973206e6f742077686974656c6973746564a265627a7a7231582027b429820752a709f5c2934c4e5ff36d04e34370509df3341ba04010b9263f2764736f6c634300050b0032",
  "sourceMap": "251:1239:9:-;;;1695:5:3;1674:26;;;;;;;;;;;;;;;;;;;;767:336:9;8:9:-1;5:2;;;30:1;27;20:12;5:2;767:336:9;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;767:336:9;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;384:12;379:3;372:25;420:4;415:3;411:14;404:21;;0:432;;767:336:9;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;767:336:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;384:12;379:3;372:25;420:4;415:3;411:14;404:21;;0:432;;767:336:9;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;767:336:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;720:40:2;387:10;739:20;;720:18;;;:40;;:::i;:::-;2750::3;2622:10;2769:20;;2750:18;;;:40;;:::i;:::-;2843:12;:10;;;:12;;:::i;:::-;2835:5;;:20;;;;;;;;;;;;;;;;;;873:4:9;865:5;:12;;;;;;;;;;;;:::i;:::-;;897:6;887:7;:16;;;;;;;;;;;;:::i;:::-;;991:49;701:10;1010:29;;991:18;;;:49;;:::i;:::-;1051:44;1079:15;1051:27;;;;;:44;;:::i;:::-;767:336;;;251:1239;;1444:190:2;1534:10;1519:25;;:11;:25;;;;;1511:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1623:4;1587:20;:33;1608:11;1587:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;1444:190;:::o;3327:90:3:-;3372:7;3399:10;3392:17;;3327:90;:::o;4362:144::-;3969:5;;;;;;;;;;;3953:21;;:12;:10;;;:12;;:::i;:::-;:21;;;3932:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4488:10;4460:8;;:39;;;;;;;;;;;;;;;;;;4362:144;:::o;251:1239:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "251:1239:9:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;251:1239:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;917:133:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;917:133:2;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1208:83:9;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1208:83:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14002:236:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14002:236:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;13040:677;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13040:677:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;15928:585;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15928:585:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4674:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4674:120:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;25620:128;;;:::i;:::-;;5825:184;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5825:184:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;17162:134;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;17162:134:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;23623:230;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23623:230:3;;;;;;;;;;;;;;;;;:::i;:::-;;6527:261;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6527:261:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6527:261:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6527:261:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6527:261:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6527:261:3;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1674:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;12339:280;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12339:280:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11833:258;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11833:258:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;794:32;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;25362:80;;;:::i;:::-;;7549:219;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7549:219:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7549:219:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7549:219:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7549:219:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7549:219:3;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;725:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1400:87:9;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1400:87:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7036:192:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7036:192:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;14531:436;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14531:436:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5149:108;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5149:108:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;18019:620;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;18019:620:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;18019:620:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;18019:620:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;18019:620:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;18019:620:3;;;;;;;;;;;;;;;:::i;:::-;;4362:144;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4362:144:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;11332:230;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11332:230:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11332:230:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8292:269;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8292:269:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8292:269:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8292:269:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;8292:269:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8292:269:3;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;15306:185;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15306:185:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4051:167;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4051:167:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;917:133:2;987:4;1010:20;:33;1031:11;1010:33;;;;;;;;;;;;;;;;;;;;;;;;;;;1003:40;;917:133;;;:::o;1208:83:9:-;1247:13;1279:5;1272:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1208:83;:::o;14002:236:3:-;14061:7;14102:16;14110:7;14102;:16::i;:::-;14081:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14206:15;:24;14222:7;14206:24;;;;;;;;;;;;;;;;;;;;;14199:31;;14002:236;;;:::o;13040:677::-;4977:27;4991:12;:10;:12::i;:::-;4977:13;:27::i;:::-;4956:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;13162:18;13183:16;13191:7;13183;:16::i;:::-;13162:37;;13237:10;13231:16;;:2;:16;;;;13210:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13334:17;13348:2;13334:13;:17::i;:::-;13313:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13477:10;13461:26;;:12;:10;:12::i;:::-;:26;;;:72;;;;13491:42;13508:10;13520:12;:10;:12::i;:::-;13491:16;:42::i;:::-;13461:72;13440:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13659:2;13632:15;:24;13648:7;13632:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;13701:7;13697:2;13676:33;;13685:10;13676:33;;;;;;;;;;;;25135:1;13040:677;;:::o;15928:585::-;4977:27;4991:12;:10;:12::i;:::-;4977:13;:27::i;:::-;4956:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;16090:41;16109:12;:10;:12::i;:::-;16123:7;16090:18;:41::i;:::-;16069:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16238:19;16252:4;16238:13;:19::i;:::-;16217:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16367:17;16381:2;16367:13;:17::i;:::-;16346:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16473:32;16487:4;16493:2;16497:7;16473:13;:32::i;:::-;15928:585;;;:::o;4674:120::-;4734:4;4757:8;;;;;;;;;;;:22;;;4780:6;4757:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4757:30:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4757:30:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4757:30:3;;;;;;;;;;;;;;;;4750:37;;4674:120;;;:::o;25620:128::-;3969:5;;;;;;;;;;;3953:21;;:12;:10;:12::i;:::-;:21;;;3932:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25259:6;;;;;;;;;;;25251:15;;;;;;25736:5;25727:6;;:14;;;;;;;;;;;;;;;;;;25620:128::o;5825:184::-;5941:4;5430:22;5439:12;:10;:12::i;:::-;5430:8;:22::i;:::-;5409:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;5962:18;5968:2;5972:7;5962:5;:18::i;:::-;5997:4;5990:11;;5825:184;;;;:::o;17162:134::-;17249:39;17266:4;17272:2;17276:7;17249:39;;;;;;;;;;;;:16;:39::i;:::-;17162:134;;;:::o;23623:230::-;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;23707:41;23726:12;:10;:12::i;:::-;23740:7;23707:18;:41::i;:::-;23686:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23831:14;23837:7;23831:5;:14::i;:::-;23623:230;:::o;6527:261::-;6679:4;5430:22;5439:12;:10;:12::i;:::-;5430:8;:22::i;:::-;5409:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;6700:18;6706:2;6710:7;6700:5;:18::i;:::-;6728:31;6741:7;6750:8;6728:12;:31::i;:::-;6776:4;6769:11;;6527:261;;;;;:::o;1674:26::-;;;;;;;;;;;;;:::o;12339:280::-;12394:7;12414:18;12435:11;:20;12447:7;12435:20;;;;;;;;;;;;;;;;;;;;;12414:41;;12508:1;12486:24;;:10;:24;;;;12465:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12601:10;12594:17;;;12339:280;;;:::o;11833:258::-;11893:7;11956:1;11934:24;;:10;:24;;;;11913:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12044:39;:17;:29;12062:10;12044:29;;;;;;;;;;;;;;;:37;:39::i;:::-;12037:46;;11833:258;;;:::o;794:32::-;;;;;;;;;;;;;:::o;25362:80::-;3969:5;;;;;;;;;;;3953:21;;:12;:10;:12::i;:::-;:21;;;3932:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;25431:4;25422:6;;:13;;;;;;;;;;;;;;;;;;25362:80::o;7549:219::-;7689:4;5430:22;5439:12;:10;:12::i;:::-;5430:8;:22::i;:::-;5409:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;7710:29;7720:2;7724:7;7733:5;7710:9;:29::i;:::-;7756:4;7749:11;;7549:219;;;;;:::o;725:20::-;;;;;;;;;;;;;:::o;1400:87:9:-;1441:13;1473:7;1466:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1400:87;:::o;7036:192:3:-;7156:4;5430:22;5439:12;:10;:12::i;:::-;5430:8;:22::i;:::-;5409:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;7177:22;7187:2;7191:7;7177:9;:22::i;:::-;7216:4;7209:11;;7036:192;;;;:::o;14531:436::-;4977:27;4991:12;:10;:12::i;:::-;4977:13;:27::i;:::-;4956:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;14675:12;:10;:12::i;:::-;14669:18;;:2;:18;;;;14661:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14749:17;14763:2;14749:13;:17::i;:::-;14728:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14894:8;14855:18;:32;14874:12;:10;:12::i;:::-;14855:32;;;;;;;;;;;;;;;:36;14888:2;14855:36;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;14946:2;14917:42;;14932:12;:10;:12::i;:::-;14917:42;;;14950:8;14917:42;;;;;;;;;;;;;;;;;;;;;;14531:436;;:::o;5149:108::-;5205:4;5228:22;5242:7;5228:13;:22::i;:::-;5221:29;;5149:108;;;:::o;18019:620::-;4977:27;4991:12;:10;:12::i;:::-;4977:13;:27::i;:::-;4956:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;18205:19;18219:4;18205:13;:19::i;:::-;18184:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18334:17;18348:2;18334:13;:17::i;:::-;18313:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18461:41;18480:12;:10;:12::i;:::-;18494:7;18461:18;:41::i;:::-;18440:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18588:43;18606:4;18612:2;18616:7;18625:5;18588:17;:43::i;:::-;18019:620;;;;:::o;4362:144::-;3969:5;;;;;;;;;;;3953:21;;:12;:10;:12::i;:::-;:21;;;3932:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4488:10;4460:8;;:39;;;;;;;;;;;;;;;;;;4362:144;:::o;11332:230::-;11390:13;11437:16;11445:7;11437;:16::i;:::-;11416:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11535:10;:19;11546:7;11535:19;;;;;;;;;;;11528:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11332:230;;;:::o;8292:269::-;8448:4;5430:22;5439:12;:10;:12::i;:::-;5430:8;:22::i;:::-;5409:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25118:6;;;;;;;;;;;25117:7;25109:16;;;;;;8469:22;8479:2;8483:7;8469:9;:22::i;:::-;8501:31;8514:7;8523:8;8501:12;:31::i;:::-;8549:4;8542:11;;8292:269;;;;;:::o;15306:185::-;15415:4;15443:18;:30;15462:10;15443:30;;;;;;;;;;;;;;;:40;15474:8;15443:40;;;;;;;;;;;;;;;;;;;;;;;;;15436:47;;15306:185;;;;:::o;4051:167::-;3969:5;;;;;;;;;;;3953:21;;:12;:10;:12::i;:::-;:21;;;3932:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4167:1;4147:22;;:8;:22;;;4143:69;;4193:8;4185:5;;:16;;;;;;;;;;;;;;;;;;4143:69;4051:167;:::o;19857:165::-;19914:4;19931:18;19952:11;:20;19964:7;19952:20;;;;;;;;;;;;;;;;;;;;;19931:41;;20012:1;19990:24;;:10;:24;;;;19983:31;;;19857:165;;;:::o;3327:90::-;3372:7;3399:10;3392:17;;3327:90;:::o;20383:702::-;20516:4;4977:27;4991:12;:10;:12::i;:::-;4977:13;:27::i;:::-;4956:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20558:16;20566:7;20558;:16::i;:::-;20537:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20676:22;20690:7;20676:13;:22::i;:::-;20655:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20787:18;20808:16;20816:7;20808;:16::i;:::-;20787:37;;20857:25;20871:10;20857:13;:25::i;:::-;20836:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20990:10;20979:21;;:7;:21;;;:56;;;;21028:7;21004:31;;:20;21016:7;21004:11;:20::i;:::-;:31;;;20979:56;:97;;;;21039:37;21056:10;21068:7;21039:16;:37::i;:::-;20979:97;20971:106;;;20383:702;;;;:::o;21462:518::-;21589:4;21569:24;;:16;21577:7;21569;:16::i;:::-;:24;;;21548:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21706:1;21692:16;;:2;:16;;;;21671:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21781:23;21796:7;21781:14;:23::i;:::-;21815:35;:17;:23;21833:4;21815:23;;;;;;;;;;;;;;;:33;:35::i;:::-;21860:33;:17;:21;21878:2;21860:21;;;;;;;;;;;;;;;:31;:33::i;:::-;21927:2;21904:11;:20;21916:7;21904:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;21964:7;21960:2;21945:27;;21954:4;21945:27;;;;;;;;;;;;21462:518;;;:::o;10314:329::-;10400:1;10386:16;;:2;:16;;;;10378:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10458:16;10466:7;10458;:16::i;:::-;10457:17;10449:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10541:2;10518:11;:20;10530:7;10518:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;10553:33;:17;:21;10571:2;10553:21;;;;;;;;;;;;;;;:31;:33::i;:::-;10627:7;10623:2;10602:33;;10619:1;10602:33;;;;;;;;;;;;10314:329;;:::o;24828:92::-;24880:32;24886:16;24894:7;24886;:16::i;:::-;24904:7;24880:5;:32::i;:::-;24828:92;:::o;10912:220::-;11011:16;11019:7;11011;:16::i;:::-;10990:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11121:3;11099:10;:19;11110:7;11099:19;;;;;;;;;;;:25;;;;;;;;;;;;:::i;:::-;;10912:220;;:::o;1061:112:1:-;1126:7;1152;:14;;;1145:21;;1061:112;;;:::o;9793:276:3:-;9881:18;9887:2;9891:7;9881:5;:18::i;:::-;9931:54;9962:1;9966:2;9970:7;9979:5;9931:22;:54::i;:::-;9910:151;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9793:276;;;:::o;9090:102::-;9158:26;9168:2;9172:7;9158:26;;;;;;;;;;;;:9;:26::i;:::-;9090:102;;:::o;19344:318::-;19466:32;19480:4;19486:2;19490:7;19466:13;:32::i;:::-;19530:48;19553:4;19559:2;19563:7;19572:5;19530:22;:48::i;:::-;19509:145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19344:318;;;;:::o;23090:173::-;23190:1;23154:38;;:15;:24;23170:7;23154:24;;;;;;;;;;;;;;;;;;;;;:38;;;23150:106;;23243:1;23208:15;:24;23224:7;23208:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;23150:106;23090:173;:::o;1274:108:1:-;1354:21;1373:1;1354:7;:14;;;:18;;:21;;;;:::i;:::-;1337:7;:14;;:38;;;;1274:108;:::o;1179:89::-;1260:1;1242:7;:14;;;:19;;;;;;;;;;;1179:89;:::o;24127:520:3:-;24240:10;24220:30;;:16;24228:7;24220;:16::i;:::-;:30;;;24199:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24324:23;24339:7;24324:14;:23::i;:::-;24358:41;:17;:29;24376:10;24358:29;;;;;;;;;;;;;;;:39;:41::i;:::-;24440:1;24409:11;:20;24421:7;24409:20;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;24529:1;24498:10;:19;24509:7;24498:19;;;;;;;;;;;24492:33;;;;;;;;;;;;;;;;:38;24488:95;;24553:10;:19;24564:7;24553:19;;;;;;;;;;;;24546:26;;;;:::i;:::-;24488:95;24631:7;24627:1;24598:41;;24607:10;24598:41;;;;;;;;;;;;24127:520;;:::o;22569:359::-;22698:4;22724:15;:2;:13;;;:15::i;:::-;22719:58;;22762:4;22755:11;;;;22719:58;22787:13;22819:2;22803:36;;;22840:12;:10;:12::i;:::-;22854:4;22860:7;22869:5;22803:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;22803:72:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22803:72:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22803:72:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22803:72:3;;;;;;;;;;;;;;;;22787:88;;1048:10;22903:16;;22893:26;;;:6;:26;;;;22885:35;;;22569:359;;;;;;;:::o;1276:134:11:-;1334:7;1360:43;1364:1;1367;1360:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1353:50;;1276:134;;;;:::o;559:797:0:-;619:4;1064:16;1090:19;1112:66;1090:88;;;;1279:7;1267:20;1255:32;;1318:3;1306:15;;:8;:15;;:42;;;;;1337:11;1325:8;:23;;1306:42;1298:51;;;;559:797;;;:::o;1846:187:11:-;1932:7;1964:1;1959;:6;;1967:12;1951:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1951:29:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1990:9;2006:1;2002;:5;1990:17;;2025:1;2018:8;;;1846:187;;;;;:::o;251:1239:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.11;\n\nimport \"./ERC721.sol\";\n\n/**\n * Customized for Microsponsors\n * from Open Zeppelin's ERC721Metadata contract:\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol\n */\ncontract Microsponsors is ERC721 {\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /**\n     * @dev Constructor function\n     */\n    constructor (string memory name, string memory symbol, address registryAddress) public {\n\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n\n        super.updateRegistryAddress(registryAddress);\n\n    }\n\n    /**\n     * @dev Gets the token name.\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol.\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n}\n",
  "sourcePath": "/Users/lauren/github/erc-721/contracts/Microsponsors.sol",
  "ast": {
    "absolutePath": "/Users/lauren/github/erc-721/contracts/Microsponsors.sol",
    "exportedSymbols": {
      "Microsponsors": [
        1441
      ]
    },
    "id": 1442,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1386,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:9"
      },
      {
        "absolutePath": "/Users/lauren/github/erc-721/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 1387,
        "nodeType": "ImportDirective",
        "scope": 1442,
        "sourceUnit": 1225,
        "src": "26:22:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1388,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1224,
              "src": "277:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$1224",
                "typeString": "contract ERC721"
              }
            },
            "id": 1389,
            "nodeType": "InheritanceSpecifier",
            "src": "277:6:9"
          }
        ],
        "contractDependencies": [
          142,
          1224,
          1234,
          1337
        ],
        "contractKind": "contract",
        "documentation": "Customized for Microsponsors\nfrom Open Zeppelin's ERC721Metadata contract:\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol",
        "fullyImplemented": true,
        "id": 1441,
        "linearizedBaseContracts": [
          1441,
          1224,
          1337,
          142,
          1234
        ],
        "name": "Microsponsors",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1391,
            "name": "_name",
            "nodeType": "VariableDeclaration",
            "scope": 1441,
            "src": "309:20:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1390,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "309:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 1393,
            "name": "_symbol",
            "nodeType": "VariableDeclaration",
            "scope": 1441,
            "src": "356:22:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1392,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "356:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 1396,
            "name": "_INTERFACE_ID_ERC721_METADATA",
            "nodeType": "VariableDeclaration",
            "scope": 1441,
            "src": "645:66:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 1394,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "645:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "30783562356531333966",
              "id": 1395,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "701:10:9",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1532892063_by_1",
                "typeString": "int_const 1532892063"
              },
              "value": "0x5b5e139f"
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1423,
              "nodeType": "Block",
              "src": "854:249:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1407,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1405,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1391,
                      "src": "865:5:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1406,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1398,
                      "src": "873:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "865:12:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1408,
                  "nodeType": "ExpressionStatement",
                  "src": "865:12:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1411,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1409,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1393,
                      "src": "887:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1410,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1400,
                      "src": "897:6:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "887:16:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1412,
                  "nodeType": "ExpressionStatement",
                  "src": "887:16:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1414,
                        "name": "_INTERFACE_ID_ERC721_METADATA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1396,
                        "src": "1010:29:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "id": 1413,
                      "name": "_registerInterface",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 141,
                      "src": "991:18:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
                        "typeString": "function (bytes4)"
                      }
                    },
                    "id": 1415,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "991:49:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1416,
                  "nodeType": "ExpressionStatement",
                  "src": "991:49:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1420,
                        "name": "registryAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1402,
                        "src": "1079:15:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1417,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1737,
                        "src": "1051:5:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_Microsponsors_$1441",
                          "typeString": "contract super Microsponsors"
                        }
                      },
                      "id": 1419,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "updateRegistryAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 281,
                      "src": "1051:27:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1421,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1051:44:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1422,
                  "nodeType": "ExpressionStatement",
                  "src": "1051:44:9"
                }
              ]
            },
            "documentation": "@dev Constructor function",
            "id": 1424,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1403,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1398,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 1424,
                  "src": "780:18:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1397,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "780:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1400,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 1424,
                  "src": "800:20:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1399,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "800:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1402,
                  "name": "registryAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1424,
                  "src": "822:23:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1401,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "822:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "779:67:9"
            },
            "returnParameters": {
              "id": 1404,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "854:0:9"
            },
            "scope": 1441,
            "src": "767:336:9",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1431,
              "nodeType": "Block",
              "src": "1262:29:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1429,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1391,
                    "src": "1279:5:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1428,
                  "id": 1430,
                  "nodeType": "Return",
                  "src": "1272:12:9"
                }
              ]
            },
            "documentation": "@dev Gets the token name.\n@return string representing the token name",
            "id": 1432,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1425,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1221:2:9"
            },
            "returnParameters": {
              "id": 1428,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1427,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1432,
                  "src": "1247:13:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1426,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1247:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1246:15:9"
            },
            "scope": 1441,
            "src": "1208:83:9",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1439,
              "nodeType": "Block",
              "src": "1456:31:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1437,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1393,
                    "src": "1473:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1436,
                  "id": 1438,
                  "nodeType": "Return",
                  "src": "1466:14:9"
                }
              ]
            },
            "documentation": "@dev Gets the token symbol.\n@return string representing the token symbol",
            "id": 1440,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1433,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1415:2:9"
            },
            "returnParameters": {
              "id": 1436,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1435,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1440,
                  "src": "1441:13:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1434,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1441:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1440:15:9"
            },
            "scope": 1441,
            "src": "1400:87:9",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1442,
        "src": "251:1239:9"
      }
    ],
    "src": "0:1491:9"
  },
  "legacyAST": {
    "absolutePath": "/Users/lauren/github/erc-721/contracts/Microsponsors.sol",
    "exportedSymbols": {
      "Microsponsors": [
        1441
      ]
    },
    "id": 1442,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1386,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:9"
      },
      {
        "absolutePath": "/Users/lauren/github/erc-721/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 1387,
        "nodeType": "ImportDirective",
        "scope": 1442,
        "sourceUnit": 1225,
        "src": "26:22:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1388,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1224,
              "src": "277:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$1224",
                "typeString": "contract ERC721"
              }
            },
            "id": 1389,
            "nodeType": "InheritanceSpecifier",
            "src": "277:6:9"
          }
        ],
        "contractDependencies": [
          142,
          1224,
          1234,
          1337
        ],
        "contractKind": "contract",
        "documentation": "Customized for Microsponsors\nfrom Open Zeppelin's ERC721Metadata contract:\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol",
        "fullyImplemented": true,
        "id": 1441,
        "linearizedBaseContracts": [
          1441,
          1224,
          1337,
          142,
          1234
        ],
        "name": "Microsponsors",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1391,
            "name": "_name",
            "nodeType": "VariableDeclaration",
            "scope": 1441,
            "src": "309:20:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1390,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "309:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 1393,
            "name": "_symbol",
            "nodeType": "VariableDeclaration",
            "scope": 1441,
            "src": "356:22:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1392,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "356:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 1396,
            "name": "_INTERFACE_ID_ERC721_METADATA",
            "nodeType": "VariableDeclaration",
            "scope": 1441,
            "src": "645:66:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 1394,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "645:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "30783562356531333966",
              "id": 1395,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "701:10:9",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1532892063_by_1",
                "typeString": "int_const 1532892063"
              },
              "value": "0x5b5e139f"
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1423,
              "nodeType": "Block",
              "src": "854:249:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1407,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1405,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1391,
                      "src": "865:5:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1406,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1398,
                      "src": "873:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "865:12:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1408,
                  "nodeType": "ExpressionStatement",
                  "src": "865:12:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1411,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1409,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1393,
                      "src": "887:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1410,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1400,
                      "src": "897:6:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "887:16:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1412,
                  "nodeType": "ExpressionStatement",
                  "src": "887:16:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1414,
                        "name": "_INTERFACE_ID_ERC721_METADATA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1396,
                        "src": "1010:29:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "id": 1413,
                      "name": "_registerInterface",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 141,
                      "src": "991:18:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
                        "typeString": "function (bytes4)"
                      }
                    },
                    "id": 1415,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "991:49:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1416,
                  "nodeType": "ExpressionStatement",
                  "src": "991:49:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1420,
                        "name": "registryAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1402,
                        "src": "1079:15:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1417,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1737,
                        "src": "1051:5:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_Microsponsors_$1441",
                          "typeString": "contract super Microsponsors"
                        }
                      },
                      "id": 1419,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "updateRegistryAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 281,
                      "src": "1051:27:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1421,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1051:44:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1422,
                  "nodeType": "ExpressionStatement",
                  "src": "1051:44:9"
                }
              ]
            },
            "documentation": "@dev Constructor function",
            "id": 1424,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1403,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1398,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 1424,
                  "src": "780:18:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1397,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "780:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1400,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 1424,
                  "src": "800:20:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1399,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "800:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1402,
                  "name": "registryAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1424,
                  "src": "822:23:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1401,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "822:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "779:67:9"
            },
            "returnParameters": {
              "id": 1404,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "854:0:9"
            },
            "scope": 1441,
            "src": "767:336:9",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1431,
              "nodeType": "Block",
              "src": "1262:29:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1429,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1391,
                    "src": "1279:5:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1428,
                  "id": 1430,
                  "nodeType": "Return",
                  "src": "1272:12:9"
                }
              ]
            },
            "documentation": "@dev Gets the token name.\n@return string representing the token name",
            "id": 1432,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1425,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1221:2:9"
            },
            "returnParameters": {
              "id": 1428,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1427,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1432,
                  "src": "1247:13:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1426,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1247:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1246:15:9"
            },
            "scope": 1441,
            "src": "1208:83:9",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1439,
              "nodeType": "Block",
              "src": "1456:31:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1437,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1393,
                    "src": "1473:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1436,
                  "id": 1438,
                  "nodeType": "Return",
                  "src": "1466:14:9"
                }
              ]
            },
            "documentation": "@dev Gets the token symbol.\n@return string representing the token symbol",
            "id": 1440,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1433,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1415:2:9"
            },
            "returnParameters": {
              "id": 1436,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1435,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1440,
                  "src": "1441:13:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1434,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1441:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1440:15:9"
            },
            "scope": 1441,
            "src": "1400:87:9",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1442,
        "src": "251:1239:9"
      }
    ],
    "src": "0:1491:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.11+commit.c082d0b4.Emscripten.clang"
  },
  "networks": {
    "1566590108056": {
      "events": {},
      "links": {},
      "address": "0xc3B071C86A5cC693A3466064f915018182D78F80",
      "transactionHash": "0x7289706a9c7c617f1f1ffab6cc587ef22867bd1785fb0d225ee16a0fbe4dd073"
    },
    "1566849932580": {
      "events": {},
      "links": {},
      "address": "0x53eE7EBE7C10c9983a468088498Dd6960457D3C5",
      "transactionHash": "0x4e3408fe97bf2148b89bf8f235a5c195a1e69c27b871ffb98665faab57d0a530"
    }
  },
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-08-26T20:08:37.506Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "tokenOwner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "burn(uint256)": {
        "details": "Burns a specific ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the ERC721 token to be burned."
        }
      },
      "constructor": {
        "details": "Constructor function"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given token owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "tokenOwner": "token owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the token owner"
      },
      "isMinter(address)": {
        "details": "Checks if minter isWhitelisted()"
      },
      "isWhitelisted(address)": {
        "details": "Checks Registry contract for whitelisted status",
        "params": {
          "target": "The address to check"
        }
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens.",
        "params": {
          "to": "The address that will receive the minted token.",
          "tokenId": "The token id to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "mintWithTokenURI(address,uint256,string)": {
        "details": "Function to mint tokens.",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "tokenId": "The token id to mint.",
          "tokenURI": "The token URI of the minted token."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "name()": {
        "details": "Gets the token name.",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "pause()": {
        "details": "Called by contract owner to pause actions on this contract"
      },
      "safeMint(address,uint256)": {
        "details": "Function to safely mint tokens.",
        "params": {
          "to": "The address that will receive the minted token.",
          "tokenId": "The token id to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "safeMint(address,uint256,bytes)": {
        "details": "Function to safely mint tokens.",
        "params": {
          "_data": "bytes data to send along with a safe transfer check.",
          "to": "The address that will receive the minted token.",
          "tokenId": "The token id to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "safeMintWithTokenURI(address,uint256,string)": {
        "details": "Function to safely mint tokens.",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "tokenId": "The token id to mint.",
          "tokenURI": "The token URI of the minted token."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Gets the token symbol.",
        "return": "string representing the token symbol"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "unpause()": {
        "details": "Called by contract owner to unpause the smart contract."
      },
      "updateRegistryAddress(address)": {
        "details": "Update address for Microsponsors Registry contract",
        "params": {
          "newAddress": "where the Registry contract lives"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "burn(uint256)": {
        "notice": "Customized for Microsponsors"
      },
      "mintWithTokenURI(address,uint256,string)": {
        "notice": "Customized for Microsponsors from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721MetadataMintable.sol"
      },
      "safeMintWithTokenURI(address,uint256,string)": {
        "notice": "Customized for Microsponsors from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721MetadataMintable.sol"
      },
      "unpause()": {
        "notice": "This is public rather than external so it can be called by  derived contracts."
      }
    },
    "notice": "Customized for Microsponsors from Open Zeppelin's ERC721Metadata contract: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol"
  }
}