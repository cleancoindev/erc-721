{
  "contractName": "Microsponsors",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mintWithTokenURI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "safeMintWithTokenURI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract DeployedRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateRegistryAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.c082d0b4\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"safeMintWithTokenURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DeployedRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRegistryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"tokenOwner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"burn(uint256)\":{\"details\":\"Burns a specific ERC721 token.\",\"params\":{\"tokenId\":\"uint256 id of the ERC721 token to be burned.\"}},\"constructor\":{\"details\":\"Constructor function\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given token owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"tokenOwner\":\"token owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the token owner\"},\"isMinter(address)\":{\"details\":\"Checks if minter isWhitelisted()\"},\"isWhitelisted(address)\":{\"details\":\"Checks Registry contract for whitelisted status\",\"params\":{\"target\":\"The address to check\"}},\"mint(address)\":{\"details\":\"Function to mint tokens.\",\"params\":{\"to\":\"The address that will receive the minted token.\"},\"return\":\"tokenId\"},\"mintWithTokenURI(address,string)\":{\"details\":\"Function to mint tokens.\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"tokenURI\":\"The token URI of the minted token.\"},\"return\":\"tokenId\"},\"name()\":{\"details\":\"Gets the token name.\",\"return\":\"string representing the token name\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"pause()\":{\"details\":\"Called by contract owner to pause actions on this contract\"},\"safeMint(address)\":{\"details\":\"Function to safely mint tokens.\",\"params\":{\"to\":\"The address that will receive the minted token.\"},\"return\":\"tokenId\"},\"safeMint(address,bytes)\":{\"details\":\"Function to safely mint tokens.\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check.\",\"to\":\"The address that will receive the minted token.\"},\"return\":\"tokenId\"},\"safeMintWithTokenURI(address,string)\":{\"details\":\"Function to safely mint tokens.\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"tokenURI\":\"The token URI of the minted token.\"},\"return\":\"tokenId\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Gets the token symbol.\",\"return\":\"string representing the token symbol\"},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query\"}},\"tokensOfOwner(address)\":{\"details\":\"This method MUST NEVER be called by smart contract code. First, it's fairly expensive (it walks the entire _tokenIds array looking for tokens belonging to owner), but it also returns a dynamic array, which is only supported for web3 calls, and not contract-to-contract calls.\",\"params\":{\"tokenOwner\":\"The owner whose tokens we are interested in.\"},\"return\":\"uint256 Returns a list of all token id's assigned to an address.\"},\"totalSupply()\":{\"details\":\"Gets the total number of tokens ever minted.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"unpause()\":{\"details\":\"Called by contract owner to unpause the smart contract.\"},\"updateRegistryAddress(address)\":{\"details\":\"Update address for Microsponsors Registry contract\",\"params\":{\"newAddress\":\"where the Registry contract lives\"}}}},\"userdoc\":{\"methods\":{\"burn(uint256)\":{\"notice\":\"Customized for Microsponsors\"},\"mintWithTokenURI(address,string)\":{\"notice\":\"Customized for Microsponsors from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721MetadataMintable.sol\"},\"safeMintWithTokenURI(address,string)\":{\"notice\":\"Customized for Microsponsors from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721MetadataMintable.sol\"},\"unpause()\":{\"notice\":\"This is public rather than external so it can be called by  derived contracts.\"}},\"notice\":\"Customized for Microsponsors from Open Zeppelin's ERC721Metadata contract: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol\"}},\"settings\":{\"compilationTarget\":{\"/Users/lauren/github/erc-721/contracts/Microsponsors.sol\":\"Microsponsors\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/lauren/github/erc-721/contracts/Address.sol\":{\"keccak256\":\"0xb9c8ec62a75480fb84d7b7ddb457fab3e198c8cd1e080097227c5a0c307bded0\",\"urls\":[\"bzz-raw://997a59cc670e9ec614c3b656fe7c9802ee08398c021882202b1ba66860b3b411\",\"dweb:/ipfs/QmS7eyFmB2uPsAGvGTp4wNkdesSDbsyYmwTtXZRMgjJQLY\"]},\"/Users/lauren/github/erc-721/contracts/Counters.sol\":{\"keccak256\":\"0xf46bdae61a952c7c88b0e14b2b8a36323124d3ae6c1809b1cb6c8e0ee1ef52bd\",\"urls\":[\"bzz-raw://9df021130f1d2a259d3ecdbb1c4119d9d8e343d099c71c7c419b80dc224dcf5c\",\"dweb:/ipfs/QmbvGt28QyqV5eyEx63JKqmnVX23pKUQtUky4Ddgofw5T8\"]},\"/Users/lauren/github/erc-721/contracts/ERC165.sol\":{\"keccak256\":\"0x3a7970619ff17158d3906f2d74b2fa9896e698368ffe4bbacf4c61a821de5a89\",\"urls\":[\"bzz-raw://9abeddaf2555a3d4cc13e7988bee67ea60ce72ac70e27ce3c4120f873b0528c8\",\"dweb:/ipfs/QmVxW1BRWhpVLtecgN41Cx2XTNdiVAVbDUKQd6V1YTv6Qc\"]},\"/Users/lauren/github/erc-721/contracts/ERC721.sol\":{\"keccak256\":\"0x69b31fefc9ce70caf17f3d538411b1d5c284b72cc9be1297a7f19862cfcae19a\",\"urls\":[\"bzz-raw://5e90b37910f00d0d84466067719a58015880c46894d78b863f8ed52e4de1f38c\",\"dweb:/ipfs/QmfTJ2ftZuCdRjtmr8gx1quyBGqfTnyFkq3GukgBaLcaFX\"]},\"/Users/lauren/github/erc-721/contracts/IERC165.sol\":{\"keccak256\":\"0xdf77f8206b88bee3fab2197feea6db1d30d88799485b2c8f94de4ccfc5130f51\",\"urls\":[\"bzz-raw://652a4382cf6ce8b5b950a7e10ad3acf2756c9b57b6dc97a453cb8de365e2dd74\",\"dweb:/ipfs/QmdQjC5k9RSMYxC1bnHwRvUCemsrx59wWVT8gBG85xmA1y\"]},\"/Users/lauren/github/erc-721/contracts/IERC721.sol\":{\"keccak256\":\"0xdcea19a3fba19d9c18bea199c2c4882f533680a7c8ff481978aef4a959c1a0d4\",\"urls\":[\"bzz-raw://80da325ae2d4945672f28bae883a91f58f4c93caacbc448573eb5e6d5fb4227b\",\"dweb:/ipfs/QmdwreDnciyDjRTMXcBnr7HX7AGPtjiejUmdVtEQCEXYhC\"]},\"/Users/lauren/github/erc-721/contracts/IERC721Receiver.sol\":{\"keccak256\":\"0x2aa068c070f5be5b5a307dc7ef86b021afc38a32cee1412ee4a790e5d01f61f5\",\"urls\":[\"bzz-raw://44130d2414de808036767524a3184b3820e2c928452e1ec41f70471490e73326\",\"dweb:/ipfs/QmXA7bbDDLmNPQH3r7ERYGXWUNdDNnUYWDPnDwbD98kUy2\"]},\"/Users/lauren/github/erc-721/contracts/Microsponsors.sol\":{\"keccak256\":\"0xc4090c7464a1aaa8d8930043bf5c97da63b7e2952bada1029c208902b2a0beb9\",\"urls\":[\"bzz-raw://0e69cdead09c30c19a1850ac7c46b256de08a6f12507bc849bccd9bc89940d68\",\"dweb:/ipfs/QmcSQeGBcGkapKJwK8WhvTyMHr52mfyHLWsCZmwsBzq3Kk\"]},\"/Users/lauren/github/erc-721/contracts/SafeMath.sol\":{\"keccak256\":\"0xb2add257d778d75e1cd810e86641a556fbffd33abde4d87f8598fec4d42a724d\",\"urls\":[\"bzz-raw://edbcc35e8e58498cc504217afa8a738e9882da3de3709d0889473668b189aaf2\",\"dweb:/ipfs/QmYTTRVrJoYmjLJus9JRzFcCWEJVwdV6cSqYK8fS7K2NHj\"]}},\"version\":1}",
  "bytecode": "0x60806040526000600960006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162003d1338038062003d13833981810160405260608110156200005257600080fd5b81019080805160405193929190846401000000008211156200007357600080fd5b838201915060208201858111156200008a57600080fd5b8251866001820283011164010000000082111715620000a857600080fd5b8083526020830192505050908051906020019080838360005b83811015620000de578082015181840152602081019050620000c1565b50505050905090810190601f1680156200010c5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200013057600080fd5b838201915060208201858111156200014757600080fd5b82518660018202830111640100000000821117156200016557600080fd5b8083526020830192505050908051906020019080838360005b838110156200019b5780820151818401526020810190506200017e565b50505050905090810190601f168015620001c95780820380516001836020036101000a031916815260200191505b5060405260200180519060200190929190505050620001f56301ffc9a760e01b620002c660201b60201c565b6200020d6380ac58cd60e01b620002c660201b60201c565b6200021d620003cf60201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600a908051906020019062000275929190620004ee565b5081600b90805190602001906200028e929190620004ee565b50620002a7635b5e139f60e01b620002c660201b60201c565b620002bd81620003d760201b620022281760201c565b5050506200059d565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600033905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662000420620003cf60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620004aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200053157805160ff191683800117855562000562565b8280016001018555821562000562579182015b828111156200056157825182559160200191906001019062000544565b5b50905062000571919062000575565b5090565b6200059a91905b80821115620005965760008160009055506001016200057c565b5090565b90565b61376680620005ad6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063707d9e9a1161010457806395d89b41116100a2578063c57a882511610071578063c57a882514610ce1578063c87b56dd14610d25578063e985e9c514610dcc578063f2fde38b14610e48576101da565b806395d89b4114610aad578063a22cb46514610b30578063aa271e1a14610b80578063b88d4fde14610bdc576101da565b80637b103999116100de5780637b103999146109765780638456cb59146109c05780638462151c146109ca5780638da5cb5b14610a63576101da565b8063707d9e9a1461074057806370a082311461082f578063785bb03e14610887576101da565b80633f4ba83a1161017c57806345c177821161014b57806345c17782146105695780635c975abb146106585780636352211e1461067a5780636a627842146106e8576101da565b80633f4ba83a1461046b57806340d097c31461047557806342842e0e146104cd57806342966c681461053b576101da565b8063095ea7b3116101b8578063095ea7b31461033557806318160ddd1461038357806323b872dd146103a15780633af32abf1461040f576101da565b806301ffc9a7146101df57806306fdde0314610244578063081812fc146102c7575b600080fd5b61022a600480360360208110156101f557600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610e8c565b604051808215151515815260200191505060405180910390f35b61024c610ef3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561028c578082015181840152602081019050610271565b50505050905090810190601f1680156102b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102f3600480360360208110156102dd57600080fd5b8101908080359060200190929190505050610f95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103816004803603604081101561034b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611030565b005b61038b6112b3565b6040518082815260200191505060405180910390f35b61040d600480360360608110156103b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112c4565b005b6104516004803603602081101561042557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611410565b604051808215151515815260200191505060405180910390f35b6104736114f3565b005b6104b76004803603602081101561048b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115f3565b6040518082815260200191505060405180910390f35b610539600480360360608110156104e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061168a565b005b6105676004803603602081101561055157600080fd5b81019080803590602001909291905050506116aa565b005b6106426004803603604081101561057f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156105bc57600080fd5b8201836020820111156105ce57600080fd5b803590602001918460018302840111640100000000831117156105f057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611736565b6040518082815260200191505060405180910390f35b6106606117d8565b604051808215151515815260200191505060405180910390f35b6106a66004803603602081101561069057600080fd5b81019080803590602001909291905050506117eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61072a600480360360208110156106fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118b3565b6040518082815260200191505060405180910390f35b6108196004803603604081101561075657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561079357600080fd5b8201836020820111156107a557600080fd5b803590602001918460018302840111640100000000831117156107c757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061194a565b6040518082815260200191505060405180910390f35b6108716004803603602081101561084557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119ec565b6040518082815260200191505060405180910390f35b6109606004803603604081101561089d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156108da57600080fd5b8201836020820111156108ec57600080fd5b8035906020019184600183028401116401000000008311171561090e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611ac1565b6040518082815260200191505060405180910390f35b61097e611b5a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6109c8611b80565b005b610a0c600480360360208110156109e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c81565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a4f578082015181840152602081019050610a34565b505050509050019250505060405180910390f35b610a6b611dc9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610ab5611def565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610af5578082015181840152602081019050610ada565b50505050905090810190601f168015610b225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610b7e60048036036040811015610b4657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611e91565b005b610bc260048036036020811015610b9657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120c8565b604051808215151515815260200191505060405180910390f35b610cdf60048036036080811015610bf257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610c5957600080fd5b820183602082011115610c6b57600080fd5b80359060200191846001830284011164010000000083111715610c8d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506120da565b005b610d2360048036036020811015610cf757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612228565b005b610d5160048036036020811015610d3b57600080fd5b8101908080359060200190929190505050612336565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d91578082015181840152602081019050610d76565b50505050905090810190601f168015610dbe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610e2e60048036036040811015610de257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612449565b604051808215151515815260200191505060405180910390f35b610e8a60048036036020811015610e5e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124dd565b005b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6060600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f8b5780601f10610f6057610100808354040283529160200191610f8b565b820191906000526020600020905b815481529060010190602001808311610f6e57829003601f168201915b5050505050905090565b6000610fa082612620565b610ff5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806135ed602c913960400191505060405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61104061103b612692565b611410565b611095576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806137116021913960400191505060405180910390fd5b600960009054906101000a900460ff16156110af57600080fd5b60006110ba826117eb565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561115e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4552433732313a20617070726f76616c20697320726564756e64616e7400000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661117d612692565b73ffffffffffffffffffffffffffffffffffffffff1614806111ac57506111ab816111a6612692565b612449565b5b611201576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180613580603e913960400191505060405180910390fd5b826005600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60006112bf600361269a565b905090565b600960009054906101000a900460ff16156112de57600080fd5b6112ef6112e9612692565b826126a8565b611344576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806136426031913960400191505060405180910390fd5b61134d83611410565b6113a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806135226034913960400191505060405180910390fd5b6113ab82611410565b611400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806135226034913960400191505060405180910390fd5b61140b83838361279c565b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156114b157600080fd5b505afa1580156114c5573d6000803e3d6000fd5b505050506040513d60208110156114db57600080fd5b81019080805190602001909291905050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611534612692565b73ffffffffffffffffffffffffffffffffffffffff16146115bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600960009054906101000a900460ff166115d657600080fd5b6000600960006101000a81548160ff021916908315150217905550565b6000611605611600612692565b6120c8565b61165a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061349d6035913960400191505060405180910390fd5b600960009054906101000a900460ff161561167457600080fd5b600061167f836129f7565b905080915050919050565b6116a5838383604051806020016040528060008152506120da565b505050565b600960009054906101000a900460ff16156116c457600080fd5b6116d56116cf612692565b826126a8565b61172a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806136bc602e913960400191505060405180910390fd5b61173381612a1e565b50565b6000611748611743612692565b6120c8565b61179d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061349d6035913960400191505060405180910390fd5b600960009054906101000a900460ff16156117b757600080fd5b60006117c284612a33565b90506117ce8184612bed565b8091505092915050565b600960009054906101000a900460ff1681565b6000806004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806135be602f913960400191505060405180910390fd5b80915050919050565b60006118c56118c0612692565b6120c8565b61191a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061349d6035913960400191505060405180910390fd5b600960009054906101000a900460ff161561193457600080fd5b600061193f83612a33565b905080915050919050565b600061195c611957612692565b6120c8565b6119b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061349d6035913960400191505060405180910390fd5b600960009054906101000a900460ff16156119cb57600080fd5b60006119d6846129f7565b90506119e28184612bed565b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613556602a913960400191505060405180910390fd5b611aba600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061269a565b9050919050565b6000611ad3611ace612692565b6120c8565b611b28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061349d6035913960400191505060405180910390fd5b600960009054906101000a900460ff1615611b4257600080fd5b6000611b4e8484612c77565b90508091505092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611bc1612692565b73ffffffffffffffffffffffffffffffffffffffff1614611c4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600960009054906101000a900460ff1615611c6457600080fd5b6001600960006101000a81548160ff021916908315150217905550565b60606000611c8e836119ec565b90506000811415611cd2576000604051908082528060200260200182016040528015611cc95781602001602082028038833980820191505090505b50915050611dc4565b606081604051908082528060200260200182016040528015611d035781602001602082028038833980820191505090505b5090506000611d106112b3565b905060008090506000600190505b828111611dbb578673ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611dae5780848381518110611d9957fe5b60200260200101818152505081806001019250505b8080600101915050611d1e565b83955050505050505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e875780601f10611e5c57610100808354040283529160200191611e87565b820191906000526020600020905b815481529060010190602001808311611e6a57829003601f168201915b5050505050905090565b611ea1611e9c612692565b611410565b611ef6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806137116021913960400191505060405180910390fd5b600960009054906101000a900460ff1615611f1057600080fd5b611f18612692565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b8060076000611fc6612692565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16612073612692565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b60006120d382611410565b9050919050565b600960009054906101000a900460ff16156120f457600080fd5b6120fd84611410565b612152576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806135226034913960400191505060405180910390fd5b61215b83611410565b6121b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806135226034913960400191505060405180910390fd5b6121c16121bb612692565b836126a8565b612216576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806136426031913960400191505060405180910390fd5b61222284848484612cf1565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612269612692565b73ffffffffffffffffffffffffffffffffffffffff16146122f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061234182612620565b612396576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806136ea6027913960400191505060405180910390fd5b600860008381526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561243d5780601f106124125761010080835404028352916020019161243d565b820191906000526020600020905b81548152906001019060200180831161242057829003601f168201915b50505050509050919050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661251e612692565b73ffffffffffffffffffffffffffffffffffffffff16146125a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461261d5780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000806004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600033905090565b600081600001549050919050565b60006126b382612620565b612708576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806134f6602c913960400191505060405180910390fd5b6000612713836117eb565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061278257508373ffffffffffffffffffffffffffffffffffffffff1661276a84610f95565b73ffffffffffffffffffffffffffffffffffffffff16145b8061279357506127928185612449565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166127bc826117eb565b73ffffffffffffffffffffffffffffffffffffffff1614612828576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806136196029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806134d26024913960400191505060405180910390fd5b6128b781612d63565b6128fe600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e21565b612945600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e44565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600080612a138360405180602001604052806000815250612c77565b905080915050919050565b612a30612a2a826117eb565b82612e5a565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ad7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b612ae16003612e44565b6000612aed600361269a565b9050826004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612b88600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e44565b808373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480915050919050565b612bf682612620565b612c4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806136986024913960400191505060405180910390fd5b80600860008481526020019081526020016000209080519060200190612c7292919061337d565b505050565b600080612c8384612a33565b9050612c926000858386613038565b612ce7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603281526020018061346b6032913960400191505060405180910390fd5b8091505092915050565b612cfc84848461279c565b612d0884848484613038565b612d5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603281526020018061346b6032913960400191505060405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612e1e5760006005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b612e396001826000015461322890919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b8173ffffffffffffffffffffffffffffffffffffffff16612e7a826117eb565b73ffffffffffffffffffffffffffffffffffffffff1614612ee6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806136736025913960400191505060405180910390fd5b612eef81612d63565b612f36600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e21565b60006004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006008600083815260200190815260200160002080546001816001161561010002031660029004905014612fd857600860008281526020019081526020016000206000612fd791906133fd565b5b80600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006130598473ffffffffffffffffffffffffffffffffffffffff16613272565b6130665760019050613220565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a0261308c612692565b8887876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561314857808201518184015260208101905061312d565b50505050905090810190601f1680156131755780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561319757600080fd5b505af11580156131ab573d6000803e3d6000fd5b505050506040513d60208110156131c157600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600061326a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506132bd565b905092915050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b82141580156132b45750808214155b92505050919050565b600083831115829061336a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561332f578082015181840152602081019050613314565b50505050905090810190601f16801561335c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106133be57805160ff19168380011785556133ec565b828001600101855582156133ec579182015b828111156133eb5782518255916020019190600101906133d0565b5b5090506133f99190613445565b5090565b50805460018160011615610100020316600290046000825580601f106134235750613442565b601f0160209004906000526020600020908101906134419190613445565b5b50565b61346791905b8082111561346357600081600090555060010161344b565b5090565b9056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a2063616c6c6572206973206e6f742077686974656c697374656420666f7220746865204d696e74657220726f6c654552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572207265737472696374656420746f2077686974656c6973746564206164647265737365734552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a20746f6b656e206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f7665644552433732313a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a2063616c6c6572206973206e6f742077686974656c6973746564a265627a7a72315820cf87b4d687b8558b1e9f419bc8c77995537cc5a9af4435b76b9c37d2b26f370c64736f6c634300050b0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063707d9e9a1161010457806395d89b41116100a2578063c57a882511610071578063c57a882514610ce1578063c87b56dd14610d25578063e985e9c514610dcc578063f2fde38b14610e48576101da565b806395d89b4114610aad578063a22cb46514610b30578063aa271e1a14610b80578063b88d4fde14610bdc576101da565b80637b103999116100de5780637b103999146109765780638456cb59146109c05780638462151c146109ca5780638da5cb5b14610a63576101da565b8063707d9e9a1461074057806370a082311461082f578063785bb03e14610887576101da565b80633f4ba83a1161017c57806345c177821161014b57806345c17782146105695780635c975abb146106585780636352211e1461067a5780636a627842146106e8576101da565b80633f4ba83a1461046b57806340d097c31461047557806342842e0e146104cd57806342966c681461053b576101da565b8063095ea7b3116101b8578063095ea7b31461033557806318160ddd1461038357806323b872dd146103a15780633af32abf1461040f576101da565b806301ffc9a7146101df57806306fdde0314610244578063081812fc146102c7575b600080fd5b61022a600480360360208110156101f557600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610e8c565b604051808215151515815260200191505060405180910390f35b61024c610ef3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561028c578082015181840152602081019050610271565b50505050905090810190601f1680156102b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102f3600480360360208110156102dd57600080fd5b8101908080359060200190929190505050610f95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103816004803603604081101561034b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611030565b005b61038b6112b3565b6040518082815260200191505060405180910390f35b61040d600480360360608110156103b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112c4565b005b6104516004803603602081101561042557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611410565b604051808215151515815260200191505060405180910390f35b6104736114f3565b005b6104b76004803603602081101561048b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115f3565b6040518082815260200191505060405180910390f35b610539600480360360608110156104e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061168a565b005b6105676004803603602081101561055157600080fd5b81019080803590602001909291905050506116aa565b005b6106426004803603604081101561057f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156105bc57600080fd5b8201836020820111156105ce57600080fd5b803590602001918460018302840111640100000000831117156105f057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611736565b6040518082815260200191505060405180910390f35b6106606117d8565b604051808215151515815260200191505060405180910390f35b6106a66004803603602081101561069057600080fd5b81019080803590602001909291905050506117eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61072a600480360360208110156106fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118b3565b6040518082815260200191505060405180910390f35b6108196004803603604081101561075657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561079357600080fd5b8201836020820111156107a557600080fd5b803590602001918460018302840111640100000000831117156107c757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061194a565b6040518082815260200191505060405180910390f35b6108716004803603602081101561084557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119ec565b6040518082815260200191505060405180910390f35b6109606004803603604081101561089d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156108da57600080fd5b8201836020820111156108ec57600080fd5b8035906020019184600183028401116401000000008311171561090e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611ac1565b6040518082815260200191505060405180910390f35b61097e611b5a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6109c8611b80565b005b610a0c600480360360208110156109e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c81565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a4f578082015181840152602081019050610a34565b505050509050019250505060405180910390f35b610a6b611dc9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610ab5611def565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610af5578082015181840152602081019050610ada565b50505050905090810190601f168015610b225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610b7e60048036036040811015610b4657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611e91565b005b610bc260048036036020811015610b9657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120c8565b604051808215151515815260200191505060405180910390f35b610cdf60048036036080811015610bf257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610c5957600080fd5b820183602082011115610c6b57600080fd5b80359060200191846001830284011164010000000083111715610c8d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506120da565b005b610d2360048036036020811015610cf757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612228565b005b610d5160048036036020811015610d3b57600080fd5b8101908080359060200190929190505050612336565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d91578082015181840152602081019050610d76565b50505050905090810190601f168015610dbe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610e2e60048036036040811015610de257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612449565b604051808215151515815260200191505060405180910390f35b610e8a60048036036020811015610e5e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124dd565b005b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6060600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f8b5780601f10610f6057610100808354040283529160200191610f8b565b820191906000526020600020905b815481529060010190602001808311610f6e57829003601f168201915b5050505050905090565b6000610fa082612620565b610ff5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806135ed602c913960400191505060405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61104061103b612692565b611410565b611095576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806137116021913960400191505060405180910390fd5b600960009054906101000a900460ff16156110af57600080fd5b60006110ba826117eb565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561115e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4552433732313a20617070726f76616c20697320726564756e64616e7400000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661117d612692565b73ffffffffffffffffffffffffffffffffffffffff1614806111ac57506111ab816111a6612692565b612449565b5b611201576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180613580603e913960400191505060405180910390fd5b826005600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60006112bf600361269a565b905090565b600960009054906101000a900460ff16156112de57600080fd5b6112ef6112e9612692565b826126a8565b611344576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806136426031913960400191505060405180910390fd5b61134d83611410565b6113a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806135226034913960400191505060405180910390fd5b6113ab82611410565b611400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806135226034913960400191505060405180910390fd5b61140b83838361279c565b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156114b157600080fd5b505afa1580156114c5573d6000803e3d6000fd5b505050506040513d60208110156114db57600080fd5b81019080805190602001909291905050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611534612692565b73ffffffffffffffffffffffffffffffffffffffff16146115bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600960009054906101000a900460ff166115d657600080fd5b6000600960006101000a81548160ff021916908315150217905550565b6000611605611600612692565b6120c8565b61165a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061349d6035913960400191505060405180910390fd5b600960009054906101000a900460ff161561167457600080fd5b600061167f836129f7565b905080915050919050565b6116a5838383604051806020016040528060008152506120da565b505050565b600960009054906101000a900460ff16156116c457600080fd5b6116d56116cf612692565b826126a8565b61172a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806136bc602e913960400191505060405180910390fd5b61173381612a1e565b50565b6000611748611743612692565b6120c8565b61179d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061349d6035913960400191505060405180910390fd5b600960009054906101000a900460ff16156117b757600080fd5b60006117c284612a33565b90506117ce8184612bed565b8091505092915050565b600960009054906101000a900460ff1681565b6000806004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806135be602f913960400191505060405180910390fd5b80915050919050565b60006118c56118c0612692565b6120c8565b61191a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061349d6035913960400191505060405180910390fd5b600960009054906101000a900460ff161561193457600080fd5b600061193f83612a33565b905080915050919050565b600061195c611957612692565b6120c8565b6119b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061349d6035913960400191505060405180910390fd5b600960009054906101000a900460ff16156119cb57600080fd5b60006119d6846129f7565b90506119e28184612bed565b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613556602a913960400191505060405180910390fd5b611aba600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061269a565b9050919050565b6000611ad3611ace612692565b6120c8565b611b28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061349d6035913960400191505060405180910390fd5b600960009054906101000a900460ff1615611b4257600080fd5b6000611b4e8484612c77565b90508091505092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611bc1612692565b73ffffffffffffffffffffffffffffffffffffffff1614611c4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600960009054906101000a900460ff1615611c6457600080fd5b6001600960006101000a81548160ff021916908315150217905550565b60606000611c8e836119ec565b90506000811415611cd2576000604051908082528060200260200182016040528015611cc95781602001602082028038833980820191505090505b50915050611dc4565b606081604051908082528060200260200182016040528015611d035781602001602082028038833980820191505090505b5090506000611d106112b3565b905060008090506000600190505b828111611dbb578673ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611dae5780848381518110611d9957fe5b60200260200101818152505081806001019250505b8080600101915050611d1e565b83955050505050505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e875780601f10611e5c57610100808354040283529160200191611e87565b820191906000526020600020905b815481529060010190602001808311611e6a57829003601f168201915b5050505050905090565b611ea1611e9c612692565b611410565b611ef6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806137116021913960400191505060405180910390fd5b600960009054906101000a900460ff1615611f1057600080fd5b611f18612692565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b8060076000611fc6612692565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16612073612692565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b60006120d382611410565b9050919050565b600960009054906101000a900460ff16156120f457600080fd5b6120fd84611410565b612152576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806135226034913960400191505060405180910390fd5b61215b83611410565b6121b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806135226034913960400191505060405180910390fd5b6121c16121bb612692565b836126a8565b612216576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806136426031913960400191505060405180910390fd5b61222284848484612cf1565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612269612692565b73ffffffffffffffffffffffffffffffffffffffff16146122f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061234182612620565b612396576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806136ea6027913960400191505060405180910390fd5b600860008381526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561243d5780601f106124125761010080835404028352916020019161243d565b820191906000526020600020905b81548152906001019060200180831161242057829003601f168201915b50505050509050919050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661251e612692565b73ffffffffffffffffffffffffffffffffffffffff16146125a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4552433732313a2063616c6c6572206973206e6f74206f776e6572000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461261d5780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000806004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600033905090565b600081600001549050919050565b60006126b382612620565b612708576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806134f6602c913960400191505060405180910390fd5b6000612713836117eb565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061278257508373ffffffffffffffffffffffffffffffffffffffff1661276a84610f95565b73ffffffffffffffffffffffffffffffffffffffff16145b8061279357506127928185612449565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166127bc826117eb565b73ffffffffffffffffffffffffffffffffffffffff1614612828576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806136196029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806134d26024913960400191505060405180910390fd5b6128b781612d63565b6128fe600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e21565b612945600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e44565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600080612a138360405180602001604052806000815250612c77565b905080915050919050565b612a30612a2a826117eb565b82612e5a565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ad7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b612ae16003612e44565b6000612aed600361269a565b9050826004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612b88600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e44565b808373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480915050919050565b612bf682612620565b612c4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806136986024913960400191505060405180910390fd5b80600860008481526020019081526020016000209080519060200190612c7292919061337d565b505050565b600080612c8384612a33565b9050612c926000858386613038565b612ce7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603281526020018061346b6032913960400191505060405180910390fd5b8091505092915050565b612cfc84848461279c565b612d0884848484613038565b612d5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603281526020018061346b6032913960400191505060405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612e1e5760006005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b612e396001826000015461322890919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b8173ffffffffffffffffffffffffffffffffffffffff16612e7a826117eb565b73ffffffffffffffffffffffffffffffffffffffff1614612ee6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806136736025913960400191505060405180910390fd5b612eef81612d63565b612f36600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e21565b60006004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006008600083815260200190815260200160002080546001816001161561010002031660029004905014612fd857600860008281526020019081526020016000206000612fd791906133fd565b5b80600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006130598473ffffffffffffffffffffffffffffffffffffffff16613272565b6130665760019050613220565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a0261308c612692565b8887876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561314857808201518184015260208101905061312d565b50505050905090810190601f1680156131755780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561319757600080fd5b505af11580156131ab573d6000803e3d6000fd5b505050506040513d60208110156131c157600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600061326a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506132bd565b905092915050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b82141580156132b45750808214155b92505050919050565b600083831115829061336a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561332f578082015181840152602081019050613314565b50505050905090810190601f16801561335c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106133be57805160ff19168380011785556133ec565b828001600101855582156133ec579182015b828111156133eb5782518255916020019190600101906133d0565b5b5090506133f99190613445565b5090565b50805460018160011615610100020316600290046000825580601f106134235750613442565b601f0160209004906000526020600020908101906134419190613445565b5b50565b61346791905b8082111561346357600081600090555060010161344b565b5090565b9056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a2063616c6c6572206973206e6f742077686974656c697374656420666f7220746865204d696e74657220726f6c654552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572207265737472696374656420746f2077686974656c6973746564206164647265737365734552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a20746f6b656e206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206e6f7220617070726f7665644552433732313a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a2063616c6c6572206973206e6f742077686974656c6973746564a265627a7a72315820cf87b4d687b8558b1e9f419bc8c77995537cc5a9af4435b76b9c37d2b26f370c64736f6c634300050b0032",
  "sourceMap": "251:1239:9:-;;;1776:5:3;1755:26;;;;;;;;;;;;;;;;;;;;767:336:9;8:9:-1;5:2;;;30:1;27;20:12;5:2;767:336:9;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;767:336:9;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;384:12;379:3;372:25;420:4;415:3;411:14;404:21;;0:432;;767:336:9;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;767:336:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;384:12;379:3;372:25;420:4;415:3;411:14;404:21;;0:432;;767:336:9;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;767:336:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;720:40:2;387:10;739:20;;720:18;;;:40;;:::i;:::-;2831::3;2703:10;2850:20;;2831:18;;;:40;;:::i;:::-;2924:12;:10;;;:12;;:::i;:::-;2916:5;;:20;;;;;;;;;;;;;;;;;;873:4:9;865:5;:12;;;;;;;;;;;;:::i;:::-;;897:6;887:7;:16;;;;;;;;;;;;:::i;:::-;;991:49;701:10;1010:29;;991:18;;;:49;;:::i;:::-;1051:44;1079:15;1051:27;;;;;:44;;:::i;:::-;767:336;;;251:1239;;1444:190:2;1534:10;1519:25;;:11;:25;;;;;1511:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1623:4;1587:20;:33;1608:11;1587:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;1444:190;:::o;3408:90:3:-;3453:7;3480:10;3473:17;;3408:90;:::o;4443:144::-;4050:5;;;;;;;;;;;4034:21;;:12;:10;;;:12;;:::i;:::-;:21;;;4013:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4569:10;4541:8;;:39;;;;;;;;;;;;;;;;;;4443:144;:::o;251:1239:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "251:1239:9:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;251:1239:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;917:133:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;917:133:2;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1208:83:9;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1208:83:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14958:236:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14958:236:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;14123:550;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14123:550:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;11259:98;;;:::i;:::-;;;;;;;;;;;;;;;;;;;16757:561;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16757:561:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4755:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4755:120:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;26110:128;;;:::i;:::-;;6832:190;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6832:190:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;17967:134;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;17967:134:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;24113:230;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;24113:230:3;;;;;;;;;;;;;;;;;:::i;:::-;;6418:260;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6418:260:3;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6418:260:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6418:260:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6418:260:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6418:260:3;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1755:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;12043:280;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12043:280:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5812:182;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5812:182:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7896:268;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7896:268:3;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7896:268:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7896:268:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7896:268:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7896:268:3;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11566:258;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11566:258:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7249:217;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7249:217:3;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7249:217:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7249:217:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7249:217:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7249:217:3;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;794:32;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;25852:80;;;:::i;:::-;;12806:867;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12806:867:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12806:867:3;;;;;;;;;;;;;;;;;725:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1400:87:9;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1400:87:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15487:309:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15487:309:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5230:108;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5230:108:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;18824:596;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;18824:596:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;18824:596:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;18824:596:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;18824:596:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;18824:596:3;;;;;;;;;;;;;;;:::i;:::-;;4443:144;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4443:144:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;10911:231;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10911:231:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10911:231:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16135:185;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16135:185:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4132:167;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4132:167:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;917:133:2;987:4;1010:20;:33;1031:11;1010:33;;;;;;;;;;;;;;;;;;;;;;;;;;;1003:40;;917:133;;;:::o;1208:83:9:-;1247:13;1279:5;1272:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1208:83;:::o;14958:236:3:-;15017:7;15058:16;15066:7;15058;:16::i;:::-;15037:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15162:15;:24;15178:7;15162:24;;;;;;;;;;;;;;;;;;;;;15155:31;;14958:236;;;:::o;14123:550::-;5058:27;5072:12;:10;:12::i;:::-;5058:13;:27::i;:::-;5037:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;14245:18;14266:16;14274:7;14266;:16::i;:::-;14245:37;;14320:10;14314:16;;:2;:16;;;;14293:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14433:10;14417:26;;:12;:10;:12::i;:::-;:26;;;:72;;;;14447:42;14464:10;14476:12;:10;:12::i;:::-;14447:16;:42::i;:::-;14417:72;14396:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14615:2;14588:15;:24;14604:7;14588:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;14657:7;14653:2;14632:33;;14641:10;14632:33;;;;;;;;;;;;25625:1;14123:550;;:::o;11259:98::-;11303:7;11330:19;:9;:17;:19::i;:::-;11323:26;;11259:98;:::o;16757:561::-;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;16895:41;16914:12;:10;:12::i;:::-;16928:7;16895:18;:41::i;:::-;16874:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17043:19;17057:4;17043:13;:19::i;:::-;17022:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17172:17;17186:2;17172:13;:17::i;:::-;17151:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17278:32;17292:4;17298:2;17302:7;17278:13;:32::i;:::-;16757:561;;;:::o;4755:120::-;4815:4;4838:8;;;;;;;;;;;:22;;;4861:6;4838:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4838:30:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4838:30:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4838:30:3;;;;;;;;;;;;;;;;4831:37;;4755:120;;;:::o;26110:128::-;4050:5;;;;;;;;;;;4034:21;;:12;:10;:12::i;:::-;:21;;;4013:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25749:6;;;;;;;;;;;25741:15;;;;;;26226:5;26217:6;;:14;;;;;;;;;;;;;;;;;;26110:128::o;6832:190::-;6935:7;5511:22;5520:12;:10;:12::i;:::-;5511:8;:22::i;:::-;5490:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;6959:15;6977:13;6987:2;6977:9;:13::i;:::-;6959:31;;7007:7;7000:14;;;6832:190;;;:::o;17967:134::-;18054:39;18071:4;18077:2;18081:7;18054:39;;;;;;;;;;;;:16;:39::i;:::-;17967:134;;;:::o;24113:230::-;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;24197:41;24216:12;:10;:12::i;:::-;24230:7;24197:18;:41::i;:::-;24176:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24321:14;24327:7;24321:5;:14::i;:::-;24113:230;:::o;6418:260::-;6553:7;5511:22;5520:12;:10;:12::i;:::-;5511:8;:22::i;:::-;5490:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;6577:15;6595:9;6601:2;6595:5;:9::i;:::-;6577:27;;6614:31;6627:7;6636:8;6614:12;:31::i;:::-;6663:7;6656:14;;;6418:260;;;;:::o;1755:26::-;;;;;;;;;;;;;:::o;12043:280::-;12098:7;12118:18;12139:11;:20;12151:7;12139:20;;;;;;;;;;;;;;;;;;;;;12118:41;;12212:1;12190:24;;:10;:24;;;;12169:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12305:10;12298:17;;;12043:280;;;:::o;5812:182::-;5911:7;5511:22;5520:12;:10;:12::i;:::-;5511:8;:22::i;:::-;5490:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;5935:15;5953:9;5959:2;5953:5;:9::i;:::-;5935:27;;5979:7;5972:14;;;5812:182;;;:::o;7896:268::-;8035:7;5511:22;5520:12;:10;:12::i;:::-;5511:8;:22::i;:::-;5490:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;8059:15;8077:13;8087:2;8077:9;:13::i;:::-;8059:31;;8100;8113:7;8122:8;8100:12;:31::i;:::-;8149:7;8142:14;;;7896:268;;;;:::o;11566:258::-;11626:7;11689:1;11667:24;;:10;:24;;;;11646:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11777:39;:17;:29;11795:10;11777:29;;;;;;;;;;;;;;;:37;:39::i;:::-;11770:46;;11566:258;;;:::o;7249:217::-;7372:7;5511:22;5520:12;:10;:12::i;:::-;5511:8;:22::i;:::-;5490:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;7396:15;7414:20;7424:2;7428:5;7414:9;:20::i;:::-;7396:38;;7451:7;7444:14;;;7249:217;;;;:::o;794:32::-;;;;;;;;;;;;;:::o;25852:80::-;4050:5;;;;;;;;;;;4034:21;;:12;:10;:12::i;:::-;:21;;;4013:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;25921:4;25912:6;;:13;;;;;;;;;;;;;;;;;;25852:80::o;12806:867::-;12871:16;12899:18;12920:21;12930:10;12920:9;:21::i;:::-;12899:42;;12970:1;12956:10;:15;12952:715;;;13045:1;13031:16;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;13031:16:3;;;;13024:23;;;;;12952:715;13078:23;13118:10;13104:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;13104:25:3;;;;13078:51;;13143:19;13165:13;:11;:13::i;:::-;13143:35;;13192:19;13214:1;13192:23;;13369:15;13414:1;13404:11;;13399:230;13428:11;13417:7;:22;13399:230;;13498:10;13474:34;;:11;:20;13486:7;13474:20;;;;;;;;;;;;;;;;;;;;;:34;;;13470:145;;;13554:7;13532:6;13539:11;13532:19;;;;;;;;;;;;;:29;;;;;13583:13;;;;;;;13470:145;13441:9;;;;;;;13399:230;;;13650:6;13643:13;;;;;;;12806:867;;;;:::o;725:20::-;;;;;;;;;;;;;:::o;1400:87:9:-;1441:13;1473:7;1466:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1400:87;:::o;15487:309:3:-;5058:27;5072:12;:10;:12::i;:::-;5058:13;:27::i;:::-;5037:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;15631:12;:10;:12::i;:::-;15625:18;;:2;:18;;;;15617:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15723:8;15684:18;:32;15703:12;:10;:12::i;:::-;15684:32;;;;;;;;;;;;;;;:36;15717:2;15684:36;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;15775:2;15746:42;;15761:12;:10;:12::i;:::-;15746:42;;;15779:8;15746:42;;;;;;;;;;;;;;;;;;;;;;15487:309;;:::o;5230:108::-;5286:4;5309:22;5323:7;5309:13;:22::i;:::-;5302:29;;5230:108;;;:::o;18824:596::-;25608:6;;;;;;;;;;;25607:7;25599:16;;;;;;18986:19;19000:4;18986:13;:19::i;:::-;18965:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19115:17;19129:2;19115:13;:17::i;:::-;19094:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19242:41;19261:12;:10;:12::i;:::-;19275:7;19242:18;:41::i;:::-;19221:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19369:43;19387:4;19393:2;19397:7;19406:5;19369:17;:43::i;:::-;18824:596;;;;:::o;4443:144::-;4050:5;;;;;;;;;;;4034:21;;:12;:10;:12::i;:::-;:21;;;4013:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4569:10;4541:8;;:39;;;;;;;;;;;;;;;;;;4443:144;:::o;10911:231::-;10969:13;11016:16;11024:7;11016;:16::i;:::-;10995:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11115:10;:19;11126:7;11115:19;;;;;;;;;;;11108:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10911:231;;;:::o;16135:185::-;16244:4;16272:18;:30;16291:10;16272:30;;;;;;;;;;;;;;;:40;16303:8;16272:40;;;;;;;;;;;;;;;;;;;;;;;;;16265:47;;16135:185;;;;:::o;4132:167::-;4050:5;;;;;;;;;;;4034:21;;:12;:10;:12::i;:::-;:21;;;4013:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4248:1;4228:22;;:8;:22;;;4224:69;;4274:8;4266:5;;:16;;;;;;;;;;;;;;;;;;4224:69;4132:167;:::o;20638:165::-;20695:4;20712:18;20733:11;:20;20745:7;20733:20;;;;;;;;;;;;;;;;;;;;;20712:41;;20793:1;20771:24;;:10;:24;;;;20764:31;;;20638:165;;;:::o;3408:90::-;3453:7;3480:10;3473:17;;3408:90;:::o;1061:112:1:-;1126:7;1152;:14;;;1145:21;;1061:112;;;:::o;21164:411:3:-;21273:4;21315:16;21323:7;21315;:16::i;:::-;21294:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21412:18;21433:16;21441:7;21433;:16::i;:::-;21412:37;;21480:10;21469:21;;:7;:21;;;:56;;;;21518:7;21494:31;;:20;21506:7;21494:11;:20::i;:::-;:31;;;21469:56;:97;;;;21529:37;21546:10;21558:7;21529:16;:37::i;:::-;21469:97;21461:106;;;21164:411;;;;:::o;21952:518::-;22079:4;22059:24;;:16;22067:7;22059;:16::i;:::-;:24;;;22038:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22196:1;22182:16;;:2;:16;;;;22161:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22271:23;22286:7;22271:14;:23::i;:::-;22305:35;:17;:23;22323:4;22305:23;;;;;;;;;;;;;;;:33;:35::i;:::-;22350:33;:17;:21;22368:2;22350:21;;;;;;;;;;;;;;;:31;:33::i;:::-;22417:2;22394:11;:20;22406:7;22394:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;22454:7;22450:2;22435:27;;22444:4;22435:27;;;;;;;;;;;;21952:518;;;:::o;8657:136::-;8706:7;8726:15;8744:17;8754:2;8744:17;;;;;;;;;;;;:9;:17::i;:::-;8726:35;;8778:7;8771:14;;;8657:136;;;:::o;25318:92::-;25370:32;25376:16;25384:7;25376;:16::i;:::-;25394:7;25370:5;:32::i;:::-;25318:92;:::o;9855:366::-;9900:7;9942:1;9928:16;;:2;:16;;;;9920:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9992:21;:9;:19;:21::i;:::-;10023:15;10041:19;:9;:17;:19::i;:::-;10023:37;;10094:2;10071:11;:20;10083:7;10071:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;10106:33;:17;:21;10124:2;10106:21;;;;;;;;;;;;;;;:31;:33::i;:::-;10180:7;10176:2;10155:33;;10172:1;10155:33;;;;;;;;;;;;10206:7;10199:14;;;9855:366;;;:::o;10490:221::-;10589:16;10597:7;10589;:16::i;:::-;10568:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10700:3;10678:10;:19;10689:7;10678:19;;;;;;;;;;;:25;;;;;;;;;;;;:::i;:::-;;10490:221;;:::o;9358:311::-;9427:7;9447:15;9465:9;9471:2;9465:5;:9::i;:::-;9447:27;;9506:54;9537:1;9541:2;9545:7;9554:5;9506:22;:54::i;:::-;9485:151;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9654:7;9647:14;;;9358:311;;;;:::o;20125:318::-;20247:32;20261:4;20267:2;20271:7;20247:13;:32::i;:::-;20311:48;20334:4;20340:2;20344:7;20353:5;20311:22;:48::i;:::-;20290:145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20125:318;;;;:::o;23580:173::-;23680:1;23644:38;;:15;:24;23660:7;23644:24;;;;;;;;;;;;;;;;;;;;;:38;;;23640:106;;23733:1;23698:15;:24;23714:7;23698:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;23640:106;23580:173;:::o;1274:108:1:-;1354:21;1373:1;1354:7;:14;;;:18;;:21;;;;:::i;:::-;1337:7;:14;;:38;;;;1274:108;:::o;1179:89::-;1260:1;1242:7;:14;;;:19;;;;;;;;;;;1179:89;:::o;24617:520:3:-;24730:10;24710:30;;:16;24718:7;24710;:16::i;:::-;:30;;;24689:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24814:23;24829:7;24814:14;:23::i;:::-;24848:41;:17;:29;24866:10;24848:29;;;;;;;;;;;;;;;:39;:41::i;:::-;24930:1;24899:11;:20;24911:7;24899:20;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;25019:1;24988:10;:19;24999:7;24988:19;;;;;;;;;;;24982:33;;;;;;;;;;;;;;;;:38;24978:95;;25043:10;:19;25054:7;25043:19;;;;;;;;;;;;25036:26;;;;:::i;:::-;24978:95;25121:7;25117:1;25088:41;;25097:10;25088:41;;;;;;;;;;;;24617:520;;:::o;23059:359::-;23188:4;23214:15;:2;:13;;;:15::i;:::-;23209:58;;23252:4;23245:11;;;;23209:58;23277:13;23309:2;23293:36;;;23330:12;:10;:12::i;:::-;23344:4;23350:7;23359:5;23293:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;23293:72:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23293:72:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;23293:72:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23293:72:3;;;;;;;;;;;;;;;;23277:88;;1048:10;23393:16;;23383:26;;;:6;:26;;;;23375:35;;;23059:359;;;;;;;:::o;1276:134:11:-;1334:7;1360:43;1364:1;1367;1360:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1353:50;;1276:134;;;;:::o;559:797:0:-;619:4;1064:16;1090:19;1112:66;1090:88;;;;1279:7;1267:20;1255:32;;1318:3;1306:15;;:8;:15;;:42;;;;;1337:11;1325:8;:23;;1306:42;1298:51;;;;559:797;;;:::o;1846:187:11:-;1932:7;1964:1;1959;:6;;1967:12;1951:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1951:29:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1990:9;2006:1;2002;:5;1990:17;;2025:1;2018:8;;;1846:187;;;;;:::o;251:1239:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.11;\n\nimport \"./ERC721.sol\";\n\n/**\n * Customized for Microsponsors\n * from Open Zeppelin's ERC721Metadata contract:\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol\n */\ncontract Microsponsors is ERC721 {\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /**\n     * @dev Constructor function\n     */\n    constructor (string memory name, string memory symbol, address registryAddress) public {\n\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n\n        super.updateRegistryAddress(registryAddress);\n\n    }\n\n    /**\n     * @dev Gets the token name.\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol.\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n}\n",
  "sourcePath": "/Users/lauren/github/erc-721/contracts/Microsponsors.sol",
  "ast": {
    "absolutePath": "/Users/lauren/github/erc-721/contracts/Microsponsors.sol",
    "exportedSymbols": {
      "Microsponsors": [
        1504
      ]
    },
    "id": 1505,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1449,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:9"
      },
      {
        "absolutePath": "/Users/lauren/github/erc-721/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 1450,
        "nodeType": "ImportDirective",
        "scope": 1505,
        "sourceUnit": 1288,
        "src": "26:22:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1451,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1287,
              "src": "277:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$1287",
                "typeString": "contract ERC721"
              }
            },
            "id": 1452,
            "nodeType": "InheritanceSpecifier",
            "src": "277:6:9"
          }
        ],
        "contractDependencies": [
          142,
          1287,
          1297,
          1400
        ],
        "contractKind": "contract",
        "documentation": "Customized for Microsponsors\nfrom Open Zeppelin's ERC721Metadata contract:\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol",
        "fullyImplemented": true,
        "id": 1504,
        "linearizedBaseContracts": [
          1504,
          1287,
          1400,
          142,
          1297
        ],
        "name": "Microsponsors",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1454,
            "name": "_name",
            "nodeType": "VariableDeclaration",
            "scope": 1504,
            "src": "309:20:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1453,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "309:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 1456,
            "name": "_symbol",
            "nodeType": "VariableDeclaration",
            "scope": 1504,
            "src": "356:22:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1455,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "356:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 1459,
            "name": "_INTERFACE_ID_ERC721_METADATA",
            "nodeType": "VariableDeclaration",
            "scope": 1504,
            "src": "645:66:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 1457,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "645:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "30783562356531333966",
              "id": 1458,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "701:10:9",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1532892063_by_1",
                "typeString": "int_const 1532892063"
              },
              "value": "0x5b5e139f"
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1486,
              "nodeType": "Block",
              "src": "854:249:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1468,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1454,
                      "src": "865:5:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1469,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1461,
                      "src": "873:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "865:12:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1471,
                  "nodeType": "ExpressionStatement",
                  "src": "865:12:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1474,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1472,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1456,
                      "src": "887:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1473,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1463,
                      "src": "897:6:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "887:16:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1475,
                  "nodeType": "ExpressionStatement",
                  "src": "887:16:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1477,
                        "name": "_INTERFACE_ID_ERC721_METADATA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1459,
                        "src": "1010:29:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "id": 1476,
                      "name": "_registerInterface",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 141,
                      "src": "991:18:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
                        "typeString": "function (bytes4)"
                      }
                    },
                    "id": 1478,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "991:49:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1479,
                  "nodeType": "ExpressionStatement",
                  "src": "991:49:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1483,
                        "name": "registryAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1465,
                        "src": "1079:15:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1480,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1800,
                        "src": "1051:5:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_Microsponsors_$1504",
                          "typeString": "contract super Microsponsors"
                        }
                      },
                      "id": 1482,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "updateRegistryAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 283,
                      "src": "1051:27:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1484,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1051:44:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1485,
                  "nodeType": "ExpressionStatement",
                  "src": "1051:44:9"
                }
              ]
            },
            "documentation": "@dev Constructor function",
            "id": 1487,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1466,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1461,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 1487,
                  "src": "780:18:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1460,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "780:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1463,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 1487,
                  "src": "800:20:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1462,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "800:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1465,
                  "name": "registryAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1487,
                  "src": "822:23:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1464,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "822:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "779:67:9"
            },
            "returnParameters": {
              "id": 1467,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "854:0:9"
            },
            "scope": 1504,
            "src": "767:336:9",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1494,
              "nodeType": "Block",
              "src": "1262:29:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1492,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1454,
                    "src": "1279:5:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1491,
                  "id": 1493,
                  "nodeType": "Return",
                  "src": "1272:12:9"
                }
              ]
            },
            "documentation": "@dev Gets the token name.\n@return string representing the token name",
            "id": 1495,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1488,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1221:2:9"
            },
            "returnParameters": {
              "id": 1491,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1490,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1495,
                  "src": "1247:13:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1489,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1247:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1246:15:9"
            },
            "scope": 1504,
            "src": "1208:83:9",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1502,
              "nodeType": "Block",
              "src": "1456:31:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1500,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1456,
                    "src": "1473:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1499,
                  "id": 1501,
                  "nodeType": "Return",
                  "src": "1466:14:9"
                }
              ]
            },
            "documentation": "@dev Gets the token symbol.\n@return string representing the token symbol",
            "id": 1503,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1496,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1415:2:9"
            },
            "returnParameters": {
              "id": 1499,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1498,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1503,
                  "src": "1441:13:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1497,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1441:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1440:15:9"
            },
            "scope": 1504,
            "src": "1400:87:9",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1505,
        "src": "251:1239:9"
      }
    ],
    "src": "0:1491:9"
  },
  "legacyAST": {
    "absolutePath": "/Users/lauren/github/erc-721/contracts/Microsponsors.sol",
    "exportedSymbols": {
      "Microsponsors": [
        1504
      ]
    },
    "id": 1505,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1449,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:9"
      },
      {
        "absolutePath": "/Users/lauren/github/erc-721/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 1450,
        "nodeType": "ImportDirective",
        "scope": 1505,
        "sourceUnit": 1288,
        "src": "26:22:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1451,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1287,
              "src": "277:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$1287",
                "typeString": "contract ERC721"
              }
            },
            "id": 1452,
            "nodeType": "InheritanceSpecifier",
            "src": "277:6:9"
          }
        ],
        "contractDependencies": [
          142,
          1287,
          1297,
          1400
        ],
        "contractKind": "contract",
        "documentation": "Customized for Microsponsors\nfrom Open Zeppelin's ERC721Metadata contract:\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol",
        "fullyImplemented": true,
        "id": 1504,
        "linearizedBaseContracts": [
          1504,
          1287,
          1400,
          142,
          1297
        ],
        "name": "Microsponsors",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1454,
            "name": "_name",
            "nodeType": "VariableDeclaration",
            "scope": 1504,
            "src": "309:20:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1453,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "309:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 1456,
            "name": "_symbol",
            "nodeType": "VariableDeclaration",
            "scope": 1504,
            "src": "356:22:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1455,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "356:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 1459,
            "name": "_INTERFACE_ID_ERC721_METADATA",
            "nodeType": "VariableDeclaration",
            "scope": 1504,
            "src": "645:66:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 1457,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "645:6:9",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "30783562356531333966",
              "id": 1458,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "701:10:9",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1532892063_by_1",
                "typeString": "int_const 1532892063"
              },
              "value": "0x5b5e139f"
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1486,
              "nodeType": "Block",
              "src": "854:249:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1468,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1454,
                      "src": "865:5:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1469,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1461,
                      "src": "873:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "865:12:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1471,
                  "nodeType": "ExpressionStatement",
                  "src": "865:12:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1474,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1472,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1456,
                      "src": "887:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1473,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1463,
                      "src": "897:6:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "887:16:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1475,
                  "nodeType": "ExpressionStatement",
                  "src": "887:16:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1477,
                        "name": "_INTERFACE_ID_ERC721_METADATA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1459,
                        "src": "1010:29:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "id": 1476,
                      "name": "_registerInterface",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 141,
                      "src": "991:18:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
                        "typeString": "function (bytes4)"
                      }
                    },
                    "id": 1478,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "991:49:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1479,
                  "nodeType": "ExpressionStatement",
                  "src": "991:49:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1483,
                        "name": "registryAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1465,
                        "src": "1079:15:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1480,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1800,
                        "src": "1051:5:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_Microsponsors_$1504",
                          "typeString": "contract super Microsponsors"
                        }
                      },
                      "id": 1482,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "updateRegistryAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 283,
                      "src": "1051:27:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1484,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1051:44:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1485,
                  "nodeType": "ExpressionStatement",
                  "src": "1051:44:9"
                }
              ]
            },
            "documentation": "@dev Constructor function",
            "id": 1487,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1466,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1461,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 1487,
                  "src": "780:18:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1460,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "780:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1463,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 1487,
                  "src": "800:20:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1462,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "800:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1465,
                  "name": "registryAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 1487,
                  "src": "822:23:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1464,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "822:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "779:67:9"
            },
            "returnParameters": {
              "id": 1467,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "854:0:9"
            },
            "scope": 1504,
            "src": "767:336:9",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1494,
              "nodeType": "Block",
              "src": "1262:29:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1492,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1454,
                    "src": "1279:5:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1491,
                  "id": 1493,
                  "nodeType": "Return",
                  "src": "1272:12:9"
                }
              ]
            },
            "documentation": "@dev Gets the token name.\n@return string representing the token name",
            "id": 1495,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1488,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1221:2:9"
            },
            "returnParameters": {
              "id": 1491,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1490,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1495,
                  "src": "1247:13:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1489,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1247:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1246:15:9"
            },
            "scope": 1504,
            "src": "1208:83:9",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1502,
              "nodeType": "Block",
              "src": "1456:31:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1500,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1456,
                    "src": "1473:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1499,
                  "id": 1501,
                  "nodeType": "Return",
                  "src": "1466:14:9"
                }
              ]
            },
            "documentation": "@dev Gets the token symbol.\n@return string representing the token symbol",
            "id": 1503,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1496,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1415:2:9"
            },
            "returnParameters": {
              "id": 1499,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1498,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1503,
                  "src": "1441:13:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1497,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1441:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1440:15:9"
            },
            "scope": 1504,
            "src": "1400:87:9",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1505,
        "src": "251:1239:9"
      }
    ],
    "src": "0:1491:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.11+commit.c082d0b4.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-09-11T00:29:48.772Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "tokenOwner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "burn(uint256)": {
        "details": "Burns a specific ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the ERC721 token to be burned."
        }
      },
      "constructor": {
        "details": "Constructor function"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given token owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "tokenOwner": "token owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the token owner"
      },
      "isMinter(address)": {
        "details": "Checks if minter isWhitelisted()"
      },
      "isWhitelisted(address)": {
        "details": "Checks Registry contract for whitelisted status",
        "params": {
          "target": "The address to check"
        }
      },
      "mint(address)": {
        "details": "Function to mint tokens.",
        "params": {
          "to": "The address that will receive the minted token."
        },
        "return": "tokenId"
      },
      "mintWithTokenURI(address,string)": {
        "details": "Function to mint tokens.",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "tokenURI": "The token URI of the minted token."
        },
        "return": "tokenId"
      },
      "name()": {
        "details": "Gets the token name.",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "pause()": {
        "details": "Called by contract owner to pause actions on this contract"
      },
      "safeMint(address)": {
        "details": "Function to safely mint tokens.",
        "params": {
          "to": "The address that will receive the minted token."
        },
        "return": "tokenId"
      },
      "safeMint(address,bytes)": {
        "details": "Function to safely mint tokens.",
        "params": {
          "_data": "bytes data to send along with a safe transfer check.",
          "to": "The address that will receive the minted token."
        },
        "return": "tokenId"
      },
      "safeMintWithTokenURI(address,string)": {
        "details": "Function to safely mint tokens.",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "tokenURI": "The token URI of the minted token."
        },
        "return": "tokenId"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Gets the token symbol.",
        "return": "string representing the token symbol"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "tokensOfOwner(address)": {
        "details": "This method MUST NEVER be called by smart contract code. First, it's fairly expensive (it walks the entire _tokenIds array looking for tokens belonging to owner), but it also returns a dynamic array, which is only supported for web3 calls, and not contract-to-contract calls.",
        "params": {
          "tokenOwner": "The owner whose tokens we are interested in."
        },
        "return": "uint256 Returns a list of all token id's assigned to an address."
      },
      "totalSupply()": {
        "details": "Gets the total number of tokens ever minted."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "unpause()": {
        "details": "Called by contract owner to unpause the smart contract."
      },
      "updateRegistryAddress(address)": {
        "details": "Update address for Microsponsors Registry contract",
        "params": {
          "newAddress": "where the Registry contract lives"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "burn(uint256)": {
        "notice": "Customized for Microsponsors"
      },
      "mintWithTokenURI(address,string)": {
        "notice": "Customized for Microsponsors from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721MetadataMintable.sol"
      },
      "safeMintWithTokenURI(address,string)": {
        "notice": "Customized for Microsponsors from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721MetadataMintable.sol"
      },
      "unpause()": {
        "notice": "This is public rather than external so it can be called by  derived contracts."
      }
    },
    "notice": "Customized for Microsponsors from Open Zeppelin's ERC721Metadata contract: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Metadata.sol"
  }
}